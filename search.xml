<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexoMatery</title>
    <url>/2022/01/18/hexomatery/</url>
    <content><![CDATA[<h3 id="一：hexo-theme-matery-源作者-（我自己使用的是它）"><a href="#一：hexo-theme-matery-源作者-（我自己使用的是它）" class="headerlink" title="一：hexo-theme-matery 源作者 （我自己使用的是它）"></a>一：hexo-theme-matery 源作者 （我自己使用的是它）</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p>
<h3 id="二：Hexo-matery-网友修改过的版本"><a href="#二：Hexo-matery-网友修改过的版本" class="headerlink" title="二：Hexo+matery 网友修改过的版本"></a>二：Hexo+matery 网友修改过的版本</h3><p><a href="https://github.com/huxuyf/blog-hexo-matery">https://github.com/huxuyf/blog-hexo-matery</a></p>
<h3 id="三：hexo设置网站运行时间"><a href="#三：hexo设置网站运行时间" class="headerlink" title="三：hexo设置网站运行时间"></a>三：hexo设置网站运行时间</h3><p><a href="https://www.heson10.com/posts/46662.html">https://www.heson10.com/posts/46662.html</a></p>
<p>效果预览：</p>
<p><a href="https://pic.heson10.com/img/image-20200719000704508.png"><img src="https://pic.heson10.com/img/image-20200719000704508.png" alt="image-20200719000704508"></a></p>
<p>1.找到<code>hexo\themes\next\layout\_partials\footer.swig</code>修改对应的代码。</p>
]]></content>
  </entry>
  <entry>
    <title>HexoNext进阶优化</title>
    <url>/2021/01/15/hexonext-jin-jie/</url>
    <content><![CDATA[<h1 id="hexo的next主题个性化教程：打造炫酷网站"><a href="#hexo的next主题个性化教程：打造炫酷网站" class="headerlink" title="hexo的next主题个性化教程：打造炫酷网站"></a>hexo的next主题个性化教程：打造炫酷网站</h1><p><a href="https://blog.csdn.net/qq_33699981/article/details/72716951">https://blog.csdn.net/qq_33699981/article/details/72716951</a></p>
<h2 id="NexT官方"><a href="#NexT官方" class="headerlink" title="NexT官方"></a>NexT官方</h2><p><a href="http://theme-next.iissnan.com/getting-started.html#avatar-setting">http://theme-next.iissnan.com/getting-started.html#avatar-setting</a></p>
<h1 id="hexo-next主题高级配置"><a href="#hexo-next主题高级配置" class="headerlink" title="hexo + next主题高级配置"></a>hexo + next主题高级配置</h1><p><a href="https://blog.csdn.net/destinytaoer/article/details/78400023">https://blog.csdn.net/destinytaoer/article/details/78400023</a></p>
<h1 id="hexo-next主题如何加头像"><a href="#hexo-next主题如何加头像" class="headerlink" title="hexo next主题如何加头像"></a>hexo next主题如何加头像</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown或其他渲染引擎，解析文章，在几秒内，即可利用靓丽的主生成静态网页。其中主题也是各种各样。这是我博客的头像</p>
<p><img src="https://exp-picture.cdn.bcebos.com/9bc92713e8e5eceee638f19ccc704618deda7adb.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="hexo next主题如何加头像"></p>
<h2 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h2><ul>
<li>头像图片（像素为200×200）</li>
<li>编辑工具（如：Notepad++）</li>
</ul>
<h2 id="实施修改"><a href="#实施修改" class="headerlink" title="实施修改"></a>实施修改</h2><ol>
<li><p>首先找到你安装hexo Next主题的文件夹，我的是放在F盘的，具体的地址为F:\项目文件\themes\next，在next文件夹在找到主题配置文件_config.yml，然后打开</p>
<p><img src="https://exp-picture.cdn.bcebos.com/de9bfa3b3b8602211cd3dce5d8bbf82065fb72db.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="hexo next主题如何加头像"></p>
</li>
<li><p>把你的要加的头像修整好，最好是像素200×200的，复制粘贴到\themes\next\source\images文件下，图片名称为：avatar.gif</p>
<p><img src="https://exp-picture.cdn.bcebos.com/52fae62064fb960b68a54ad28fa355e982ae6cdb.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="hexo next主题如何加头像"></p>
</li>
<li><p>在主题配置文件_config.yml里面找到avatar（可以用快速查找，快速找到），在里面添加 url: /images/avatar.gif（注意：url：要加一个空格）</p>
<p><img src="https://exp-picture.cdn.bcebos.com/54a89daee8d7592a836bafcb9f31dfb6336c67db.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="hexo next主题如何加头像"></p>
</li>
<li><p>4</p>
<p>添加好之后保存一下，然后重新运行hexo，就好了。</p>
</li>
</ol>
<h3 id="8、搜索菜单"><a href="#8、搜索菜单" class="headerlink" title="8、搜索菜单"></a>8、搜索菜单</h3><p>安装插件：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在站点配置文件最后新增：</p>
<pre class="line-numbers language-none"><code class="language-none">search:
  path: search.xml
  field: post
  format: html
  limit: 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改主题文件，搜索local_search，将enable改为true</p>
<pre class="line-numbers language-none"><code class="language-none">local_search:
  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="设置文章缩略显示"><a href="#设置文章缩略显示" class="headerlink" title="设置文章缩略显示"></a>设置文章缩略显示</h3><p>编辑themes/next/_config.yml，搜索auto_excerpt，设置为true：</p>
<pre class="line-numbers language-none"><code class="language-none"># Automatically Excerpt (Not recommend).
# 设置文章不显示全部 点进去再显示全部
# Use &lt;!-- more --&gt; in the post to control excerpt accurately.
auto_excerpt:
enable: true
length: 150<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Hexo-Next-Gemini主题修改-页面宽度修改"><a href="#Hexo-Next-Gemini主题修改-页面宽度修改" class="headerlink" title="Hexo Next - Gemini主题修改-页面宽度修改"></a>Hexo Next - Gemini主题修改-页面宽度修改</h2><h3 id="页面宽度修改"><a href="#页面宽度修改" class="headerlink" title="页面宽度修改"></a>页面宽度修改</h3><p>chrome浏览器F12查看到页面的内容宽度占比为75%，找到themes中的next文件夹，进入/source/css/_variables/目录，打开Gemini.styl文件。可以看到以下内容：<br><a href="http://www.tanrd.com/2018/10/19/geminimodify/gemini_styl.jpg"><img src="http://www.tanrd.com/2018/10/19/geminimodify/gemini_styl.jpg" alt="将75%修改成90%即可增大可视区域。"></a></p>
<p><a href="http://www.tanrd.com/2018/10/19/geminimodify/gemini_styl.jpg">将75%修改成90%即可增大可视区域。</a></p>
<p>也可以设置$body-bg-color，改变页面背景色。</p>
<h1 id="Hexo-Next-添加版权协议并修改出现位置"><a href="#Hexo-Next-添加版权协议并修改出现位置" class="headerlink" title="Hexo Next 添加版权协议并修改出现位置"></a>Hexo Next 添加版权协议并修改出现位置</h1><p>首先打开next的<code>_config.yaml</code>，设置enable为true</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Declare license on posts</span>
<span class="token key atrule">post_copyright</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">license</span><span class="token punctuation">:</span> CC BY<span class="token punctuation">-</span>NC<span class="token punctuation">-</span>SA 3.0
  <span class="token key atrule">license_url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//creativecommons.org/licenses/by<span class="token punctuation">-</span>nc<span class="token punctuation">-</span>sa/3.0/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后到hexo的主<code>_config.yaml</code>，搜索<code>url:</code>，把内容改成自己的博客域名比如：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//exkulo.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后就发现能显示出来了。</p>
<h1 id="Hexo博客删除文章"><a href="#Hexo博客删除文章" class="headerlink" title="Hexo博客删除文章"></a>Hexo博客删除文章</h1><p>目前未找到删除文章的指令，可以到目录/source/_posts下删除相应的文章，然后重新生成部署即可</p>
<ol>
<li>到目录/source/_posts下删除相应的文章</li>
<li>$ hexo g</li>
<li>$ hexo d</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>HexoNext</title>
    <url>/2021/01/15/hexonext/</url>
    <content><![CDATA[<p><img src="https://pica.zhimg.com/v2-d4c1239e75c02e8482c22017a6c8d407_1440w.jpg?source=172ae18b" alt="GitHub+Hexo 搭建个人网站详细教程"></p>
<h1 id="GitHub-Hexo-搭建个人网站详细教程"><a href="#GitHub-Hexo-搭建个人网站详细教程" class="headerlink" title="GitHub+Hexo 搭建个人网站详细教程"></a>GitHub+Hexo 搭建个人网站详细教程</h1><p><strong>前言：</strong></p>
<p>随着互联网浪潮的翻腾，国内外涌现出越来越多优秀的社交网站让用户分享信息更加便捷。然后，如果你是一个不甘寂寞的程序猿（媛），是否也想要搭建一个属于自己的个人网站，如果你曾经或者现在正有这样的想法，请跟随这篇文章发挥你的Geek精神，让你快速拥有自己的博客网站，写文章记录生活，享受这种从0到1的过程。</p>
<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo ?"></a><strong>什么是Hexo ?</strong></h2><p><img src="https://pic2.zhimg.com/80/v2-6890485c84748900d9dae824b7f7cbb1_720w.jpg" alt="img"></p>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub。Hexo同时也是GitHub上的开源项目，参见：<a href="https://link.zhihu.com/?target=https://github.com/hexojs/hexo">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://link.zhihu.com/?target=https://hexo.io/">Hexo</a> 了解更多的细节，这里，默认各位猿/媛儿都知道GitHub就不再赘述。</p>
<p>下面正式从零开始搭建年轻人的第一个网站。</p>
<h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a><strong>搭建步骤：</strong></h2><ul>
<li>获得个人网站域名</li>
<li>GitHub创建个人仓库</li>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>更换主题</li>
<li>初识MarkDown语法</li>
<li>发布文章</li>
<li>寻找图床</li>
<li>个性化设置</li>
<li>其他</li>
<li>附录</li>
</ul>
<p><strong>获得个人网站域名</strong></p>
<p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://link.zhihu.com/?target=https://www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p>
<p>申请域名的地方有很多，这里推荐阿里云：<a href="https://link.zhihu.com/?target=https://www.aliyun.com/">阿里云-为了无法计算的价值</a> 申请入口：<a href="https://link.zhihu.com/?target=https://wanwang.aliyun.com/domain/">域名注册</a> 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p>
<p><strong>GitHub创建个人仓库</strong></p>
<p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://link.zhihu.com/?target=https://github.com/">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p>
<p><img src="https://pic4.zhimg.com/80/v2-832168e58b4ac4ce7c3cca797711d2d3_720w.jpg" alt="img"></p>
<p><strong>安装Git</strong></p>
<p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="https://link.zhihu.com/?target=http://weibo.com/liaoxuefeng">廖雪峰</a>老师的Git教程：<a href="https://link.zhihu.com/?target=http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a> 从Git官网下载：<a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p>
<p><img src="https://pic3.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_720w.jpg" alt="img"></p>
<p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的GitHub用户名"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"你的GitHub注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>生成ssh密钥文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的GitHub注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>
<p><img src="https://pic4.zhimg.com/80/v2-d1e47103ec1aa8675f68688c5d63bd27_720w.jpg" alt="img"></p>
<p>打开<a href="https://link.zhihu.com/?target=https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p>
<p><img src="https://pic1.zhimg.com/80/v2-72a3f22c080e99343c3cc4aabce10e3c_720w.jpg" alt="img"></p>
<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a> ：</p>
<p><img src="https://pic3.zhimg.com/80/v2-da481ffa686410becd4186c656b4ebd6_720w.jpg" alt="img"></p>
<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<p><strong>安装Node.js</strong></p>
<p>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p>
<p><img src="https://pic1.zhimg.com/80/v2-76ea38e9545e606f975781e47933b010_720w.jpg" alt="img"></p>
<p>检测npm是否安装成功，在命令行中输入npm -v :</p>
<p><img src="https://pic2.zhimg.com/80/v2-bede250b8456df92475b455fda8c1dd9_720w.jpg" alt="img"></p>
<p>到这了，安装Hexo的环境已经全部搭建完成。</p>
<p><strong>安装Hexo</strong></p>
<p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p>
<p><img src="https://pic1.zhimg.com/80/v2-a5450a466c0927c25dff8ad6f1d2046c_720w.jpg" alt="img"></p>
<p>使用npm命令安装Hexo，输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p>
<p><strong>（这里要注意了，如果用win10的powershell打开执行，可能报错，因为权限的问题，所以建议用Git Bash执行下面的所有代码）</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p>
<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new test_my_site

hexo g

hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p>
<p>localhost:4000</p>
<p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p>
<p><img src="https://pic4.zhimg.com/80/v2-123e73c0630d299b1c856d99b04b55bb_720w.jpg" alt="img"></p>
<p>现在来介绍常用的Hexo 命令</p>
<p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>
<p><strong>推送网站</strong></p>
<p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p>
<p><img src="https://pic2.zhimg.com/80/v2-cb1fd5e5a2e73f513234e434724c7c55_720w.jpg" alt="img"></p>
<p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p>
<p><img src="https://pic4.zhimg.com/80/v2-4252029e5634bf91c7d58916ae2b8ac3_720w.jpg" alt="img"></p>
<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>
<p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p>
<p><img src="https://pic1.zhimg.com/80/v2-279ac5149b577f04dc099defbb12eaa8_720w.jpg" alt="img"></p>
<p>保存站点配置文件。</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<pre class="line-numbers language-basemake" data-language="basemake"><code class="language-basemake">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>这时，我们分别输入三条命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean 
hexo g 
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样，参考下图) 比如我的xxxx就是我的GitHub用户名：</p>
<p><img src="https://pic1.zhimg.com/80/v2-d750452f4258bf0967d5629ef23d1b10_720w.jpg" alt="img"></p>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
<p><strong>绑定域名</strong></p>
<p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p>
<p><img src="https://pic3.zhimg.com/80/v2-47323ad4490e206aef93a3d68f0670b6_720w.jpg" alt="img"></p>
<p>然后添加解析</p>
<p><img src="https://pic3.zhimg.com/80/v2-40222b3a295bb692aac22829a8ec3be2_720w.jpg" alt="img"></p>
<p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p><img src="https://pic4.zhimg.com/80/v2-85ba6dda906f22dea4c03df2b47d994b_720w.jpg" alt="img"></p>
<p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p>
<p><img src="https://pic1.zhimg.com/80/v2-79abfff91af3f520e24cb91acf6aa994_720w.jpg" alt="img"></p>
<p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p>
<p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p>
<p><strong>更换主题</strong></p>
<p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：（注意next主题有两个版本，下面这个是旧版的）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/iissnan/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p>
<p><img src="https://pic1.zhimg.com/80/v2-b1997377e82408cb15b485c65ae00f70_720w.jpg" alt="img"></p>
<p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p>
<p><img src="https://pic2.zhimg.com/80/v2-1ac152c4aabe4c10b762ee27552f1105_720w.jpg" alt="img"></p>
<p>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p>
<p><strong>初识Markdown语法</strong></p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐Typora ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p>
<p><strong>发布文章</strong></p>
<p>我们开始正式发布上线博客文章，在命令行中输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"博客名字"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例：</p>
<p><img src="https://pic1.zhimg.com/80/v2-4f96cd03a88e68b8ae86c38bfb0808ac_720w.jpg" alt="img"></p>
<p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p>
<p><strong>寻找图床</strong></p>
<p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，**<img src="%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" alt="图片信息">** 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="https://link.zhihu.com/?target=http://www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://link.zhihu.com/?target=https://www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p>
<p><img src="https://pic4.zhimg.com/80/v2-92372e522595af139ace5f371aae3ff3_720w.jpg" alt="img"></p>
<p><strong>个性化设置</strong></p>
<p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p>
<p>基本的有：</p>
<p>在站点配置文件_config.yml修改基本的站点信息</p>
<p><img src="https://pic4.zhimg.com/80/v2-78bc0e4e6498c9c3cb269b3254d8379f_720w.jpg" alt="img"></p>
<p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p>
<p>在主题配置文件_config.yml修改基本的主题信息，如：</p>
<p><img src="https://pic2.zhimg.com/80/v2-451c5cb2fd6516650ad8ca608031bf0d_720w.jpg" alt="img"></p>
<p>博文打赏的微信、支付宝二维码图片，这里我是直接把这两张放在根目录的source文件夹中，并没有使用图床外链。</p>
<p><img src="https://pic2.zhimg.com/80/v2-69bbc45e973eb6916e08187ed8b33a55_720w.jpg" alt="img"></p>
<p>社交外链的设置，即在侧栏展示你的个人社交网站信息。</p>
<p><img src="https://pic4.zhimg.com/80/v2-5b3f6e02e0d3a0cdb685a4d2fd2718cb_720w.jpg" alt="img"></p>
<p>博文分享的插件jiathis，值设置为true。在配置文件中有很多的个性化设置，可以自尝试更多的修改。</p>
<p>进阶个性化：</p>
<ul>
<li>添加网易云音乐</li>
</ul>
<p>打开网页版的网易云音乐，选择喜欢的音乐，点击生成外链播放器</p>
<p><img src="https://pic2.zhimg.com/80/v2-fcb7d44ccdca3760c98db0d13817f2b5_720w.jpg" alt="img"></p>
<p>复制外链的代码</p>
<p><img src="https://pic4.zhimg.com/80/v2-16eec195312cde7b1d257fac6f3c8d0b_720w.jpg" alt="img"></p>
<p>比如在侧栏插入这首歌的音乐播放器，修改 blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码</p>
<p><img src="https://pic4.zhimg.com/80/v2-03db51002497b27e4d5888e0efd577c7_720w.jpg" alt="img"></p>
<p>重新生成、部署网页，效果如下</p>
<p><img src="https://pic2.zhimg.com/80/v2-3d587bf919df92db38e2608f034e50f1_720w.jpg" alt="img"></p>
<ul>
<li>设置背景</li>
</ul>
<p>把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css_custom文件的custom.styl首部添加：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/background.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>background-attachment: fixed;是固定背景图片。</p>
<p>这是设置一张静态图片作为背景，其实Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。</p>
<ul>
<li>增加侧栏菜单条目</li>
</ul>
<p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p>
<p><img src="https://pic3.zhimg.com/80/v2-666a22fedbba95d979eeb26e52fc29e2_720w.jpg" alt="img"></p>
<p>其中menu里是配置菜单项对应的页面位置（如：/love），menu_icons对应菜单项的图标，这里的图标是来自于<a href="https://link.zhihu.com/?target=http://fontawesome.io/">Font Awesome</a> ，所以你需要在Font Awesome网站上找到你需要的icon，然后把该icon的名字写在menu_icons对应菜单名后面，<em><strong>注意冒号有一个英文输入状态的空格</strong></em>。设置好后，在命令行里输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"你所要增加的菜单项名称（要和你在menu中的填写要匹配）"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>新建的页面在博客根目录下的source文件里，这时你就可以对新建的页面自定义设计。</p>
<p>还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看：</p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/third-party-services.html">第三方服务集成 - NexT 使用文档</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/tag-plugins.html">内置标签 - NexT 使用文</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/tag-plugins.html">档</a><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/advanced-settings.html">进阶设定 - NexT 使用文档</a></p>
<p><strong>其他</strong></p>
<p>终于写到这里了，也算是基本圆满完成了我的写作初衷，总结自己的一些经验，分享一些有趣的东西，不过脖子也是僵硬的受不了。我知道很多人想要建立自己的个人网站却一直没有付诸行动，希望这篇文章能给你一点点灵感与想法，just do it。本文是windows平台的搭建过程，其他平台可以参看相关资料，也有很多其他优秀的博客框架值得学习。如果有任何建议或想法、或疑问欢迎在评论区交流， 做好的网站不妨在评论区贴出网址，让大家一起学习。</p>
<p><strong>附录</strong></p>
<p><strong>以下是评论区贴出网址的博客展示：</strong></p>
<p><a href="https://link.zhihu.com/?target=http://jmyblog.top/">…Miss.j BlogDiary…</a></p>
<p><a href="https://link.zhihu.com/?target=http://ibb.chaodamiao.com/">RILWEIC</a></p>
<p><a href="https://link.zhihu.com/?target=http://blog.sunxinfei.com/">Xin’s Notes</a></p>
<p><a href="https://link.zhihu.com/?target=https://guguant.github.io/">飞鸟与鱼</a></p>
<p><a href="https://link.zhihu.com/?target=http://www.fuck-goods.tk/">无名博客</a></p>
<p><a href="https://link.zhihu.com/?target=http://helloqa.com/">iTesting软件测试知识分享</a></p>
<p><a href="https://link.zhihu.com/?target=http://bolg.upsky.top/">赵小源的个人博客</a></p>
<p><a href="https://link.zhihu.com/?target=http://www.huajiayi.top/">华嘉熠’s Blog</a></p>
<p><a href="https://link.zhihu.com/?target=http://asmire.site/">Cocoon</a></p>
<p><a href="https://link.zhihu.com/?target=https://luoshaoxiong.github.io/">罗少雄’s Blog</a></p>
<p><a href="https://link.zhihu.com/?target=https://lruihao.github.io/">李四啊_</a></p>
<p><strong>其他优秀个人博客展示：</strong></p>
<p><a href="https://link.zhihu.com/?target=https://www.dandyweng.com/">翁天信 · Dandy Weng</a> <a href="https://link.zhihu.com/?target=http://chaoxuprime.com/">chaoxuprim</a> <a href="https://link.zhihu.com/?target=http://kenjiendo.com/">KENJI ENDO</a> <a href="https://link.zhihu.com/?target=http://shenzekun.cn/">Moorez</a> <a href="https://link.zhihu.com/?target=https://codesky.me/">CodeSky 代码之空</a> <a href="https://link.zhihu.com/?target=http://www.helloshawn.cn/">大江东去</a> <a href="https://link.zhihu.com/?target=http://iconmoon.com/">UI Design Portfolio of JJ Ying</a> <a href="https://link.zhihu.com/?target=http://www.jeyzhang.com/">JeyZhang</a> <a href="https://link.zhihu.com/?target=http://blog.lightina.cn/">jacklightChen | 得到的都是侥幸</a> <a href="https://link.zhihu.com/?target=https://qingpei.me/">edwardtoday</a> <a href="https://link.zhihu.com/?target=http://rafaltomal.com/">Rafal Tomal - Web Designer and Genesis Developer</a> <a href="https://link.zhihu.com/?target=http://strml.net/">Projects and Work</a> <a href="https://link.zhihu.com/?target=http://miaoxiaoer.com/">绘画爱好者</a> <a href="https://link.zhihu.com/?target=http://ursocute.github.io/">万世奇的博客</a> <a href="https://link.zhihu.com/?target=https://rauchg.com/">Guillermo Rauch</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>HexoNext的问题汇总</title>
    <url>/2021/01/15/hexonext-wen-ti-hui-zong/</url>
    <content><![CDATA[<h3 id="一：hexo使用theme出现【extends-‘-layout-swig‘-import-‘-macro-post-swig‘-as-post-template】问题"><a href="#一：hexo使用theme出现【extends-‘-layout-swig‘-import-‘-macro-post-swig‘-as-post-template】问题" class="headerlink" title="一：hexo使用theme出现【extends ‘_layout.swig‘  import ‘_macro/post.swig‘ as post_template】问题"></a>一：hexo使用theme出现【extends ‘_layout.swig‘  import ‘_macro/post.swig‘ as post_template】问题</h3><p>答：原因是<a href="https://so.csdn.net/so/search?q=hexo">hexo</a>在5.0之后把swig给删除了需要自己手动安装</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm i hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>swig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="二：hexo中next主题下创建标签问题【-Cannot-GET-tags-20-】"><a href="#二：hexo中next主题下创建标签问题【-Cannot-GET-tags-20-】" class="headerlink" title="二：hexo中next主题下创建标签问题【 Cannot GET /tags/%20/】"></a>二：hexo中next主题下创建标签问题【 Cannot GET /tags/%20/】</h3><p>按照教程新建了标签页，也修改了index文档。</p>
<p>但是点击tags界面之后只有一行字【Cannot GET /tags/%20/】<br>经过一通搜索，知道【%20】 是空格的意思，把配置文件里 ||之前所有的空格删掉即可。</p>
<p><img src="https://img-blog.csdnimg.cn/20200709152547835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTcwOTgz,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>这个bug奇怪的点在于这个空格是next主题文件配置里面自带的，之前配置的时候好像也遇到过</p>
<h3 id="三：Hexo-Next-5-1-4目前已知bug及其处理办法"><a href="#三：Hexo-Next-5-1-4目前已知bug及其处理办法" class="headerlink" title="三：Hexo-Next 5.1.4目前已知bug及其处理办法"></a>三：Hexo-Next 5.1.4目前已知bug及其处理办法</h3><p><a href="https://blog.csdn.net/shuiyunxc/article/details/104150894">https://blog.csdn.net/shuiyunxc/article/details/104150894</a></p>
<h3 id="1-边栏头像下面日志链接错误"><a href="#1-边栏头像下面日志链接错误" class="headerlink" title="1.边栏头像下面日志链接错误"></a>1.边栏头像下面日志链接错误</h3><p>在\themes\next\layout_macro\sidebar.swig中，<br>原代码49行：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; url_for(theme.menu.archives).split(<span class="token punctuation">'</span>||<span class="token punctuation">'</span>)[0] | trim &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>修改为：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; url_for(config.archive_dir) | trim &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-底部页面左右标签显示错误“”"><a href="#2-底部页面左右标签显示错误“”" class="headerlink" title="2. 底部页面左右标签显示错误“”"></a>2. 底部页面左右标签显示错误“”</h3><p><img src="https://img-blog.csdnimg.cn/20200202231913533.jpg" alt="在这里插入图片描述"></p>
<p>在<code>\themes\next\layout\_partials\pagination.swig</code>中，</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% if page.prev or page.next %&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &#123;&#123;
      paginator(&#123;
        prev_text: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-angle-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>',
        next_text: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-angle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>',
        mid_size: 1
      &#125;)
    &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改为：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;%- if page.prev or page.next %&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &#123;&#123;
      paginator(&#123;
        prev_text: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-hand-o-left<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span> + __(<span class="token punctuation">'</span>accessibility.prev_page<span class="token punctuation">'</span>) + <span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>',
        next_text: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-hand-o-right<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span> + __(<span class="token punctuation">'</span>accessibility.next_page<span class="token punctuation">'</span>) + <span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>',
        mid_size : 1,
        escape   : false
      &#125;)
    &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
&#123;%- endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中：<code>fa-angle-right</code>为图标样式，可以自己改为自己喜欢的，去<a href="http://www.fontawesome.com.cn/faicons/%E6%89%BE">http://www.fontawesome.com.cn/faicons/找</a></p>
<h3 id="3-阅读次数不显示"><a href="#3-阅读次数不显示" class="headerlink" title="3.阅读次数不显示"></a>3.阅读次数不显示</h3><h4 id="修改-lean-analytics-swig"><a href="#修改-lean-analytics-swig" class="headerlink" title="修改 lean-analytics.swig"></a>修改 lean-analytics.swig</h4><p>在<code>\themes\next\layout\_third-party\analytics\lean-analytics.swig</code>中<br>的lean-analytics.swig代码有错误</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% if theme.leancloud_visitors.enable %&#125;

  &#123;# custom analytics part create by xiamo #&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token constant">AV</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token string">"&#123;&#123;theme.leancloud_visitors.app_id&#125;&#125;"</span><span class="token punctuation">,</span> <span class="token string">"&#123;&#123;theme.leancloud_visitors.app_key&#125;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">showTime</span><span class="token punctuation">(</span><span class="token parameter">Counter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AV<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> entries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> $visitors <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".leancloud_visitors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      $visitors<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        entries<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      query<span class="token punctuation">.</span><span class="token function">containedIn</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
      query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">var</span> <span class="token constant">COUNT_CONTAINER_REF</span> <span class="token operator">=</span> <span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            $visitors<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">COUNT_CONTAINER_REF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>

          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> results<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> item <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> url <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> time <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">COUNT_CONTAINER_REF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> entries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> url <span class="token operator">=</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> countSpan <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">COUNT_CONTAINER_REF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> countSpan<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              countSpan<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Error: "</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">Counter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> $visitors <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".leancloud_visitors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> url <span class="token operator">=</span> $visitors<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> title <span class="token operator">=</span> $visitors<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-flag-title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AV<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>

      query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
      query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> counter <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            counter<span class="token punctuation">.</span><span class="token function">fetchWhenSave</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            counter<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
              <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">counter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">var</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                $element<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">counter<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to save Visitor num, with error message: '</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> newcounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* Set ACL */</span>
            <span class="token keyword">var</span> acl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AV<span class="token punctuation">.</span>ACL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            acl<span class="token punctuation">.</span><span class="token function">setPublicReadAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            acl<span class="token punctuation">.</span><span class="token function">setPublicWriteAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newcounter<span class="token punctuation">.</span><span class="token function">setACL</span><span class="token punctuation">(</span>acl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* End Set ACL */</span>
            newcounter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newcounter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newcounter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newcounter<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
              <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newcounter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">var</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                $element<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>newcounter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newcounter<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to create'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error:'</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> Counter <span class="token operator">=</span> <span class="token constant">AV</span><span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">"Counter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.leancloud_visitors'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">addCount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.post-title-link'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">showTime</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

&#123;% endif %&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改为：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% if theme.leancloud_visitors.enable and !theme.valine.visitor %&#125;
  &#123;# custom analytics part create by xiamo; edited by LEAFERx #&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> page<span class="token punctuation">.</span>layout <span class="token operator">===</span> <span class="token string">'post'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">Counter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> $visitors <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.leancloud_visitors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> url <span class="token operator">=</span> $visitors<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> title <span class="token operator">=</span> $visitors<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-flag-title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'/classes/Counter'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> url <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> results <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> counter <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>leancloud_visitors<span class="token punctuation">.</span>betterPerformance <span class="token operator">%</span><span class="token punctuation">&#125;</span>
              <span class="token keyword">var</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              $element<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>
            <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token string">'put'</span><span class="token punctuation">,</span> <span class="token string">'/classes/Counter/'</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span>objectId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'__op'</span><span class="token operator">:</span> <span class="token string">'Increment'</span><span class="token punctuation">,</span> <span class="token string-property property">'amount'</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> not theme<span class="token punctuation">.</span>leancloud_visitors<span class="token punctuation">.</span>betterPerformance <span class="token operator">%</span><span class="token punctuation">&#125;</span>
              <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">var</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                $element<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>
              <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> responseJSON <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to save Visitor num, with error message: '</span> <span class="token operator">+</span> responseJSON<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>leancloud_visitors<span class="token punctuation">.</span>security <span class="token operator">%</span><span class="token punctuation">&#125;</span>
              <span class="token keyword">var</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              $element<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'Counter not initialized! More info at console err msg.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'ATTENTION! LeanCloud counter has security bug, see how to solve it here: https://github.com/theme-next/hexo-leancloud-counter-security. \n However, you can still use LeanCloud without security, by setting `security` option to `false`.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>
              <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'/classes/Counter'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">title</span><span class="token operator">:</span> title<span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">var</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  $element<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to create'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> responseJSON <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'LeanCloud Counter Error: '</span> <span class="token operator">+</span> responseJSON<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> responseJSON<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function">showTime</span><span class="token punctuation">(</span><span class="token parameter">Counter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> entries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> $visitors <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.leancloud_visitors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      $visitors<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        entries<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'/classes/Counter'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'$in'</span><span class="token operator">:</span> entries <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> results <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">var</span> <span class="token constant">COUNT_CONTAINER_REF</span> <span class="token operator">=</span> <span class="token string">'.leancloud-visitors-count'</span><span class="token punctuation">;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            $visitors<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">COUNT_CONTAINER_REF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>

          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> results<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> item <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> url <span class="token operator">=</span> item<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
            <span class="token keyword">var</span> time <span class="token operator">=</span> item<span class="token punctuation">.</span>time<span class="token punctuation">;</span>
            <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">COUNT_CONTAINER_REF</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> entries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> url <span class="token operator">=</span> entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> countSpan <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token constant">COUNT_CONTAINER_REF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>countSpan<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              countSpan<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> responseJSON <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'LeanCloud Counter Error: '</span> <span class="token operator">+</span> responseJSON<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> responseJSON<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>

    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://app-router.leancloud.cn/2/route?appId='</span> <span class="token operator">+</span> <span class="token string">'&#123;&#123; theme.leancloud_visitors.app_id &#125;&#125;'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> api_server <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">var</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
              <span class="token literal-property property">method</span><span class="token operator">:</span> method<span class="token punctuation">,</span>
              <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://'</span> <span class="token operator">+</span> api_server <span class="token operator">+</span> <span class="token string">'/1.1'</span> <span class="token operator">+</span> url<span class="token punctuation">,</span>
              <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token string-property property">'X-LC-Id'</span><span class="token operator">:</span> <span class="token string">'&#123;&#123; theme.leancloud_visitors.app_id &#125;&#125;'</span><span class="token punctuation">,</span>
                <span class="token string-property property">'X-LC-Key'</span><span class="token operator">:</span> <span class="token string">'&#123;&#123; theme.leancloud_visitors.app_key &#125;&#125;'</span><span class="token punctuation">,</span>
                <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">data</span><span class="token operator">:</span> data
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> page<span class="token punctuation">.</span>layout <span class="token operator">===</span> <span class="token string">'post'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>
            <span class="token keyword">const</span> localhost <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">http:\/\/(localhost|127.0.0.1|0.0.0.0)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>localhost<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token function">addCount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.post-title-link'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token function">showTime</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

&#123;% endif %&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="4-底部卜算子不显示访问人数和访问总量："><a href="#4-底部卜算子不显示访问人数和访问总量：" class="headerlink" title="4.底部卜算子不显示访问人数和访问总量："></a>4.底部卜算子不显示访问人数和访问总量：</h3><p>修改next-layout-_third-party-analytics-busuanzi-counter.swig<br>为：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/linux-xia-li-yong-jtessboxeditor-gong-ju-jin-xing-tesseract-yang-ben-xun-lian-tu/</url>
    <content><![CDATA[  <h5><a id="1_pngjpgtif_0"></a>1. 将训练用到的所有png,jpg图片转换成.tif</h5>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">convert spider_1.png spider_1.tif

<p><img src="https://img-blog.csdnimg.cn/20190425153408927.png" alt="在这里插入图片描述"></p>
<h4><a id="2_tif_5"></a>2. 将所有.tif合成样本文件</h4>
<p>打开jTessBoxEditor的命令：</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">java -jar jTessBoxEditor.jar

<p>点击Tools-&gt;Merge Tiff ，按住shift键选择tif文件，然后点击确认，然后在：<br>
<img src="https://img-blog.csdnimg.cn/20190425153745467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
自定义个tif名：这里输入num.font.exp0.tif，然后点解确认<br>
<img src="https://img-blog.csdnimg.cn/20190425153906429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
这样子就创建成功，回到cmd命令终端</p>
<h5><a id="3_box_16"></a>3. 生成box文件</h5>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">tesseract num.font.exp0.tif num.font.exp0 batch.nochop makebox
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p><img src="https://img-blog.csdnimg.cn/20190425154022481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4><a id="4_box_23"></a>4. 修改box文件</h4>
<p>jTessBoxEditor工具的Box Editor页，点击open，找到刚刚生成的num.fonttype.exp0.tif，逐个核对tif文件的box数据，是否和图片的数据一直，全部修改结束并保存。<br>
<img src="https://img-blog.csdnimg.cn/20190425154443576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5><a id="5_tr_26"></a>5. 生成字符特征文件（*.tr）</h5>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">tesseract num.font.exp0.tif num.font.exp0 nobatch box.train

<p><img src="https://img-blog.csdnimg.cn/20190425154826112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5><a id="6__33"></a>6. 产生计算字符集</h5>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">unicharset_extractor num.font.exp0.box
<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p><img src="https://img-blog.csdnimg.cn/20190425154925939.png" alt="在这里插入图片描述"></p>
<h5><a id="7_font_properties_39"></a>7. 生成font_properties</h5>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">vim font_properties

<p>然后先点i进入编辑模式，输入内容"font 0 0 0 0 0", 按Esc退出编辑模式，按shift+;进入末行模式，输入wq, 就会保存并退出</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"> mftraining -F font_properties -U unicharset num.font.exp0.tr 

<p><img src="https://img-blog.csdnimg.cn/201904251551140.png" alt="在这里插入图片描述"></p>
<h5><a id="8normproto_50"></a>8.生成字符形状正常变化特征文件normproto</h5>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">cntraining num.font.exp0.tr

<p><img src="https://img-blog.csdnimg.cn/20190425155240723.png" alt="在这里插入图片描述"></p>
<h5><a id="9_unicharsetinttempnormprotopffmtableshapetablenum_56"></a>9. 为unicharset,inttemp,normproto,pffmtable,shapetable添加前缀”num.”</h5>
<p><img src="https://img-blog.csdnimg.cn/20190425155428680.png" alt="在这里插入图片描述"></p>
<h5><a id="_58"></a>最后一步：合并训练文件</h5>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">combine_tessdata num.

<p><img src="https://img-blog.csdnimg.cn/20190425155543290.png" alt="在这里插入图片描述"></p>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/mysql-suo-yin-cun-chu-jie-gou-5-chong/</url>
    <content><![CDATA[ <p>索引是帮助MySQL高效获取数据的排好序的数据结构。</p>
<p>MySQL数据库索引存储结构一般有以下几种。</p>
<ul>
<li><code>二叉树</code></li>
<li><code>红黑树</code></li>
<li><code>HASH</code></li>
<li><code>B-Tree</code></li>
<li>
<h5><a id="BTree_7"></a><code>B+Tree（现在常用）</code></h5>
</li>
</ul>
<p>首先我们要了解的是：索引文件是存储在磁盘中的，cpu到磁盘拿取数据一般经过两步：寻道时间（磁头左右移动，速度慢，耗时）和旋转时间（磁盘旋转，快）。cpu获取数据后存入内存中的这一过程，被称为一次磁盘I/O。</p>
<p>接下来介绍一下几种索引结构的优缺点：</p>
<h6><a id="_13"></a>二叉树：</h6>
<p>优点：查找减半<br>
缺点：索引数据只能是无序的，有序数据用二叉树是个单链，完全无意义。</p>
<h6><a id="_17"></a>红黑树：</h6>
<p>优点：相比二叉树好一点，有序数据也可以使用，当节点为3时，会自动分解平衡。<br>
缺点：如果数据量很大，每次插入数据，它都会自动平衡，所以特别消耗性能，而且节点的高度是无法预测的，所以磁盘I/O操作也不可控。</p>
<h6><a id="HASH_21"></a>HASH：</h6>
<p>原理：存储结构是key-value形式存在数组中，然后通过hash函数（key）得到一个值，这个值就是它们的索引。当取数据的时候，key通过hash得到索引值，直接找就行了，复杂度为o(1)。</p>
<p>优点：查找速度快。<br>
缺点：<br>
1.会碰到key冲突情况。<br>
2.HASH结构无序，多以当查找范围数据的话，就慢一点，对于不等值的查找，就更慢了（不能避免全表扫描）<br>
3.无法通过索引值排序，因为索引存放的值是经过hash的，可能跟原来的值不相等</p>
<h6><a id="BTree_31"></a>B-Tree：</h6>
<p>优点：<br>
1.一次可以设置多个节点，降低了树的高度，多以查找很快。<br>
2.节点中的数据key从左到右依次递增。<br>
缺点：<br>
1.根节点不仅存了索引key也存了对应的记录，所以比较占用空间。<br>
2.子节点之间没有双向链表，每次查找数据都是从根节点出发，如果是查找范围数据的话，就没有优势了。如下图：<br>
<img src="https://img-blog.csdnimg.cn/20190903105346213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUyODQ1NA==,size_16,color_FFFFFF,t_70" alt="B-Tree"></p>
<h6><a id="BTree_39"></a>B+Tree</h6>
<p>优点：（与B-Tree区别）<br>
1.索引携带的数据移到了叶子节点上，在空间相同的情况下，那肯定是B+Tree存储的索引更多一些，而且树的高度更低。<br>
2.子节点之间是有双向指针指向的，查找的时候，顺着指针找就行了，不用每次都从根节点出发寻找，所以速度更快。如下图：</p>
<p><img src="https://img-blog.csdnimg.cn/20190903105507587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUyODQ1NA==,size_16,color_FFFFFF,t_70" alt="B+Tree"></p>
<p>一般使用磁盘I/O次数评价索引的优劣</p>
<p>预读：处理读取索引外，磁盘一般都会顺序向后读取一定长度的数据放入内存中。</p>
<p>局部性原理：当一个数据被 用到时，一般其附近的数据也通常会马上被应用。</p>
<p>B+Tree节点的大小，设为等于一个页，每次新建节点，就直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，就决定了一个节点的载入只需要一次IO</p>
<p>B+Tree 的节点非常多，一般都会超过100，所以高度很低，一般为3-5层</p>
<p>查看MySQL文件页的大小：<code>SHOW CLOBAL STATUS like 'Innodb_page_size';</code></p>
<p><strong>综上所述：索引结构选择B+Tree是完美的。或许以后还有更好的方式，有待挖掘！</strong></p>

                          
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/mysql-innodb-myisam-suo-yin-shi-xian-guo-cheng/</url>
    <content><![CDATA[  <p>MySQL现在最常用的存储引擎是<strong>MyISAM</strong>、<strong>InnoDB（默认）</strong></p>
<p>两者实现的底层原理都是B+Tree索引文件结构。</p>
<h5><a id="MyISAM_5"></a>MyISAM索引实现过程解析：（非聚集）</h5>
<p><img src="https://img-blog.csdnimg.cn/20190903113429999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUyODQ1NA==,size_16,color_FFFFFF,t_70" alt="MyISAM索引存储结构图"></p>
<p><strong>目标：上图以主键索引为例：想要查索引为50的那一条记录信息。</strong><br>
步骤如下：<br>
1.cpu先去根节点拿数据到内存中查看，没有找到数据，去箭头1方向查找。<br>
2.把非叶子结点的数据拿到内存中查看，也没有发现数据，应该去箭头2的方向查找。<br>
3.在箭头2的叶子节点中发现了数据key50，而对应的data为0x77。<br>
4.通过指针0x77，在应找到数据表中就能快速的找到索引为50的那一条记录。</p>
<hr>
<h5><a id="InnoDB_16"></a>InnoDB索引实现过程解析：（聚集）</h5>
<p><img src="https://img-blog.csdnimg.cn/20190903144901973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUyODQ1NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>InnoDB 索引的实现和MyISAM的不同点：InnoDB叶子节点不仅包含了索引，也包含了所有其他字段。</strong></p>
<hr>
<h4><a id="_21"></a>注意点：及相关经典面试题：</h4>
<h5><a id="1_22"></a>1.聚集索引与非聚集索引？</h5>
<p><code>聚集索引：叶节点包含了完整的数据记录</code><br>
<code>非聚集索引：叶子节点包含索引和指针，指向的数据在另一个表中。</code></p>
<h5><a id="2InnoDB_26"></a>2.为什么InnoDB表必须有主键，而且推荐自增整型主键？</h5>
<p><code>因为InnoDB本身就是按B+Tree组织的一个索引文件，所以一定要索引，主键是要帮我们存储整个表的索引结构和数据，所以一定要有主键。</code></p>
<p><code>因为B+Tree规定了节点数据是要依次递增的，而且整型数字比较节省空间，如果是随机索引的话，会引起节点的分裂，会消耗数据库性能，所以选择自增主键。也可以uuid作对比来说。</code></p>

                             
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/python-nei-cun-guan-li-ji-zhi/</url>
    <content><![CDATA[ <h4><a id="_0"></a>前言：</h4>
<p>关于python的内存管理机制，我们可以从以下三个方面来解析：</p>
<ul>
<li>
<h6><a id="_2"></a><code>引用计数</code></h6>
</li>
<li>
<h6><a id="_3"></a><code>垃圾回收（标记清除、分代回收）</code></h6>
</li>
<li>
<h6><a id="_4"></a><code>小整数对象池</code></h6>
</li>
</ul>
<h4><a id="1_6"></a>1，引用计数：</h4>
<h5><a id="11_7"></a>1.1引用计数增加的情况：</h5>
<ul>
<li>创建一个对象，例例如:a = ‘carry’,引⽤用计数 1。</li>
<li>赋值 b=a, 引⽤用计数加1</li>
<li>浅拷⻉里的引用，函数的传参foo(x)等</li>
<li>作为容器对象的一个元素:a=[1,x,’22’]</li>
</ul>
<h5><a id="12_12"></a>1.2引用计数减少的情况：</h5>
<ul>
<li>一个本地引⽤离开了它的作⽤域。⽐如上面的foo(x)函数结束时，x指向的对象引用减 1。</li>
<li>对象的别名被显式的销毁:del x ;或者del y</li>
<li>对象的⼀个别名被赋值给其他对象:x=123</li>
<li>对象从⼀个窗⼝对象中移除:carry.remove(x)</li>
<li>窗⼝对象本身被销毁:del carry，或者窗⼝对象本身离开了作用域。</li>
</ul>
<h5><a id="13_19"></a>1.3引用计数优缺点：</h5>
<h6><a id="_20"></a>优点：</h6>
<ul>
<li>简单、实时性:只用引用计数为0，内存就直接释放了。不受时间限制。</li>
</ul>
<h6><a id="_22"></a>缺点：</h6>
<ul>
<li>维护引⽤用计数消耗资源</li>
<li>出现循环引⽤（标记清除、分代回收）</li>
</ul>
<h4><a id="2_27"></a>2，垃圾回收：</h4>
<p>1，引⽤用计数为零时，释放其占⽤用的内存空间<br>
2，出现了了循环引⽤用怎么办—标记清除、分代回收</p>
<h5><a id="21_30"></a>2.1标记清除</h5>
<p>标记清除Mark-Sweep是针对循环引⽤问题的回收机制，作⽤的对象是容器类型的对象(⽐ 如:list、set、dict等)。</p>
<p>原理是:通过根节点对象(不会被删除的对象)把所有活动对象打上标记，然后回收没有被标记的非活动对象。</p>
<h5><a id="22_34"></a>2.2分代回收</h5>
<p>分代回收是建立在标记清除基础上的一种辅助回收容器器对象的GC机制。</p>
<p>无论开发的程序类型如何，规模如何，都有这样的相同之处:一些比例的内存生存周期都很短，而另一些内存的⽣存周期比较长，可能会伴随着整个程序的开始和结束。</p>
<p>所以分代回收就根据系统中内存存活时间把它们划分成不同的集合:一共分成三个集合，每个集合称为一个代。</p>
<p>它们的垃圾收集频率随对象存活时间的增大而减小。</p>
<p><strong>也就是说:对于存活时间越长的对象，就越不可能是垃圾，减少对其的收集频率。</strong></p>
<p>而新创建的对象都在第一代，第一代集合总数达到上限后，会触发GC机制:可以回收的对象 所占的内存被释放，不能被回收的移到下一代。</p>
<h4><a id="3_47"></a>3，小整数对象池</h4>
<p>整数在Python中的使用广泛，为了优化速度，使用小整数对象池来优化，小整数对象池中的数据不会被垃圾回收。</p>
<p>范围 [-5,256] 单个字母也是同样原理</p>
<h4><a id="_53"></a>注意点：</h4>
<ul>
<li>当重复创建若干变量，变量内容相同时，Python不会为相同的内容创建存储空间，而是使用引用计数的方式处理</li>
<li>字符串之间如果存在空格，则不共用数据</li>
<li>修改不可变类型，实际是创建了新的对象，指向了另一个内存空间。</li>
<li>字符串之间如果存在空格的话，则数据不共用。例</li>
</ul>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">a <span class="token operator">=</span> ‘hello python’
b <span class="token operator">=</span> ‘hello python’ 
<span class="token comment">#id(a) 不等于 id(b)</span>

<p>如果是<span class="token punctuation">:</span><br>a <span class="token operator">=</span> ‘hello_python’<br>b <span class="token operator">=</span> ‘hello_python’<br>则<span class="token punctuation">:</span>是指向同一块内存空间 </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/python-de-dan-li-mo-shi-de-ji-chong-shi-xian-fang-shi-ji-you-hua/</url>
    <content><![CDATA[<p>阅读目录(Content)</p>
<p>单例模式<br>实现单例模式的几种方式<br>1.使用模块<br>2.使用装饰器<br>3.使用类<br>4.基于__new__方法实现（推荐使用，方便）<br>5.基于metaclass方式实现<br>相关知识<br>实现单例模式</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p>
<p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p>
<p>在 Python 中，我们可以用多种方法来实现单例模式</p>
<h2 id="实现单例模式的几种方式"><a href="#实现单例模式的几种方式" class="headerlink" title="实现单例模式的几种方式"></a>实现单例模式的几种方式</h2><h4 id="1-使用模块"><a href="#1-使用模块" class="headerlink" title="1.使用模块"></a>1.使用模块</h4><p>其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>
<p>mysingleton.py</p>
<pre class="line-numbers language-none"><code class="language-none">class Singleton(object):
    def foo(self):
        pass
singleton &#x3D; Singleton()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上面的代码保存在文件 mysingleton.py 中，要使用时，直接在其他文件中导入此文件中的对象，这个对象即是单例模式的对象</p>
<pre class="line-numbers language-none"><code class="language-none">from a import singleton<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-使用装饰器"><a href="#2-使用装饰器" class="headerlink" title="2.使用装饰器"></a>2.使用装饰器</h4><pre class="line-numbers language-none"><code class="language-none">def Singleton(cls):
    _instance &#x3D; &#123;&#125;

    def _singleton(*args, **kargs):
        if cls not in _instance:
            _instance[cls] &#x3D; cls(*args, **kargs)
        return _instance[cls]

    return _singleton


@Singleton
class A(object):
    a &#x3D; 1

    def __init__(self, x&#x3D;0):
        self.x &#x3D; x


a1 &#x3D; A(2)
a2 &#x3D; A(3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.使用类</p>
<pre class="line-numbers language-none"><code class="language-none">class Singleton(object):

    def __init__(self):
        pass

    @classmethod
    def instance(cls, *args, **kwargs):
        if not hasattr(Singleton, &quot;_instance&quot;):
            Singleton._instance &#x3D; Singleton(*args, **kwargs)
        return Singleton._instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一般情况，大家以为这样就完成了单例模式，但是这样当使用多线程时会存在问题</p>
<pre class="line-numbers language-none"><code class="language-none">class Singleton(object):

    def __init__(self):
        pass

    @classmethod
    def instance(cls, *args, **kwargs):
        if not hasattr(Singleton, &quot;_instance&quot;):
            Singleton._instance &#x3D; Singleton(*args, **kwargs)
        return Singleton._instance

import threading

def task(arg):
    obj &#x3D; Singleton.instance()
    print(obj)

for i in range(10):
    t &#x3D; threading.Thread(target&#x3D;task,args&#x3D;[i,])
    t.start()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>程序执行后，打印结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;
&lt;__main__.Singleton object at 0x02C933D0&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看起来也没有问题，那是因为执行速度过快，如果在init方法中有一些IO操作，就会发现问题了，下面我们通过time.sleep模拟</p>
<p>我们在上面__init__方法中加入以下代码：</p>
<pre><code>def __init__(self):
    import time
    time.sleep(1)
</code></pre>
<p>重新执行程序后，结果如下</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;__main__.Singleton object at 0x034A3410&gt;
&lt;__main__.Singleton object at 0x034BB990&gt;
&lt;__main__.Singleton object at 0x034BB910&gt;
&lt;__main__.Singleton object at 0x034ADED0&gt;
&lt;__main__.Singleton object at 0x034E6BD0&gt;
&lt;__main__.Singleton object at 0x034E6C10&gt;
&lt;__main__.Singleton object at 0x034E6B90&gt;
&lt;__main__.Singleton object at 0x034BBA30&gt;
&lt;__main__.Singleton object at 0x034F6B90&gt;
&lt;__main__.Singleton object at 0x034E6A90&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>问题出现了！按照以上方式创建的单例，无法支持多线程</p>
<p>解决办法：加锁！未加锁部分并发执行,加锁部分串行执行,速度降低,但是保证了数据安全</p>
<pre class="line-numbers language-none"><code class="language-none">import time
import threading
class Singleton(object):
    _instance_lock &#x3D; threading.Lock()

    def __init__(self):
        time.sleep(1)

    @classmethod
    def instance(cls, *args, **kwargs):
        with Singleton._instance_lock:
            if not hasattr(Singleton, &quot;_instance&quot;):
                Singleton._instance &#x3D; Singleton(*args, **kwargs)
        return Singleton._instance


def task(arg):
    obj &#x3D; Singleton.instance()
    print(obj)
for i in range(10):
    t &#x3D; threading.Thread(target&#x3D;task,args&#x3D;[i,])
    t.start()
time.sleep(20)
obj &#x3D; Singleton.instance()
print(obj)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打印结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;
&lt;__main__.Singleton object at 0x02D6B110&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就差不多了，但是还是有一点小问题，就是当程序执行时，执行了time.sleep(20)后，下面实例化对象时，此时已经是单例模式了，但我们还是加了锁，这样不太好，再进行一些优化，把intance方法，改成下面的这样就行：</p>
<pre class="line-numbers language-none"><code class="language-none">@classmethod
def instance(cls, *args, **kwargs):
    if not hasattr(Singleton, &quot;_instance&quot;):
        with Singleton._instance_lock:
            if not hasattr(Singleton, &quot;_instance&quot;):
                Singleton._instance &#x3D; Singleton(*args, **kwargs)
    return Singleton._instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，一个可以支持多线程的单例模式就完成了</p>
<pre class="line-numbers language-none"><code class="language-none">import time
import threading
class Singleton(object):
    _instance_lock &#x3D; threading.Lock()

    def __init__(self):
        time.sleep(1)

    @classmethod
    def instance(cls, *args, **kwargs):
        if not hasattr(Singleton, &quot;_instance&quot;):
            with Singleton._instance_lock:
                if not hasattr(Singleton, &quot;_instance&quot;):
                    Singleton._instance &#x3D; Singleton(*args, **kwargs)
        return Singleton._instance


def task(arg):
    obj &#x3D; Singleton.instance()
    print(obj)
for i in range(10):
    t &#x3D; threading.Thread(target&#x3D;task,args&#x3D;[i,])
    t.start()
time.sleep(20)
obj &#x3D; Singleton.instance()
print(obj)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种方式实现的单例模式，使用时会有限制，以后实例化必须通过 obj = Singleton.instance() </p>
<p>如果用 obj=Singleton() ,这种方式得到的不是单例</p>
<p>4.基于__new__方法实现（推荐使用，方便）<br>通过上面例子，我们可以知道，当我们实现单例时，为了保证线程安全需要在内部加入锁</p>
<p>我们知道，当我们实例化一个对象时，是先执行了类的__new__方法（我们没写时，默认调用object.__new__），实例化对象；然后再执行类的__init__方法，对这个对象进行初始化，所有我们可以基于这个，实现单例模式</p>
<pre class="line-numbers language-none"><code class="language-none">import threading
class Singleton(object):
    _instance_lock &#x3D; threading.Lock()

    def __init__(self):
        pass


    def __new__(cls, *args, **kwargs):
        if not hasattr(Singleton, &quot;_instance&quot;):
            with Singleton._instance_lock:
                if not hasattr(Singleton, &quot;_instance&quot;):
                    Singleton._instance &#x3D; object.__new__(cls)  
        return Singleton._instance

obj1 &#x3D; Singleton()
obj2 &#x3D; Singleton()
print(obj1,obj2)

def task(arg):
    obj &#x3D; Singleton()
    print(obj)

for i in range(10):
    t &#x3D; threading.Thread(target&#x3D;task,args&#x3D;[i,])
    t.start()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打印结果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;__main__.Singleton object at 0x038B33D0&gt; &lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;
&lt;__main__.Singleton object at 0x038B33D0&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>采用这种方式的单例模式，以后实例化对象时，和平时实例化对象的方法一样 obj = Singleton() </p>
<p>5.基于metaclass方式实现<br>相关知识<br>“””<br>1.类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)<br>2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 <strong>call</strong> 方法<br>“””<br>例子：</p>
<pre class="line-numbers language-none"><code class="language-none">class Foo:
    def __init__(self):
        pass

    def __call__(self, *args, **kwargs):
        pass

obj &#x3D; Foo()
# 执行type的 __call__ 方法，调用 Foo类（是type的对象）的 __new__方法，用于创建对象，然后调用 Foo类（是type的对象）的 __init__方法，用于对对象初始化。

obj()    # 执行Foo的 __call__ 方法    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>元类的使用</p>
<pre class="line-numbers language-none"><code class="language-none">class SingletonType(type):
    def __init__(self,*args,**kwargs):
        super(SingletonType,self).__init__(*args,**kwargs)

    def __call__(cls, *args, **kwargs): # 这里的cls，即Foo类
        print(&#39;cls&#39;,cls)
        obj &#x3D; cls.__new__(cls,*args, **kwargs)
        cls.__init__(obj,*args, **kwargs) # Foo.__init__(obj)
        return obj

class Foo(metaclass&#x3D;SingletonType): # 指定创建Foo的type为SingletonType
    def __init__(self，name):
        self.name &#x3D; name
    def __new__(cls, *args, **kwargs):
        return object.__new__(cls)

obj &#x3D; Foo(&#39;xx&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实现单例模式</p>
<pre class="line-numbers language-none"><code class="language-none">import threading

class SingletonType(type):
    _instance_lock &#x3D; threading.Lock()
    def __call__(cls, *args, **kwargs):
        if not hasattr(cls, &quot;_instance&quot;):
            with SingletonType._instance_lock:
                if not hasattr(cls, &quot;_instance&quot;):
                    cls._instance &#x3D; super(SingletonType,cls).__call__(*args, **kwargs)
        return cls._instance

class Foo(metaclass&#x3D;SingletonType):
    def __init__(self,name):
        self.name &#x3D; name


obj1 &#x3D; Foo(&#39;name&#39;)
obj2 &#x3D; Foo(&#39;name&#39;)
print(obj1,obj2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/selenium-ding-wei-yuan-su-yi-chang-invalidselectorexception-message-invalid-selector/</url>
    <content><![CDATA[<p>需要定位的元素的html代码为：</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">&lt;input class="loginbox-sbt btn-sub" type="submit" value="登录"&gt;

<p><strong>如果直接使用find_element_by_class_name()来查找：</strong></p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">getcheck <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"loginbox-sbt btn-sub"</span><span class="token punctuation">)</span>

<p><strong>会显示下面的错误：</strong><br>
<img src="https://img-blog.csdnimg.cn/20190408230239285.png" alt="在这里插入图片描述"></p>
<h6><a id="_12"></a>解决方案：</h6>
<p><strong>方案一：class值取其中之一最具有唯一性的</strong></p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">getcheck <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"btn-sub"</span><span class="token punctuation">)</span>

<p><strong>方案二：使用find_element_by_css_selector()来查找元素，在每个class_name中添加"."</strong></p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">getcheck <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">".loginbox-sbt.btn-sub"</span><span class="token punctuation">)</span>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/ubantu-zhong-shi-yong-tesseract-shi-bie-jian-dan-yan-zheng-ma/</url>
    <content><![CDATA[ <h3><a name="t0"></a><a id="_0"></a>环境准备：</h3>
<ol>
<li>pip install pillow  # 安装PIL, 处理图片的库</li>
<li>pip install pytesseract</li>
<li>pip install urllib # 用到urllib.request.urlretrieve来通过url下载图片到本地</li>
</ol>
<h3><a name="t1"></a><a id="_6"></a>测试代码：</h3>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> pytesseract
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> request
<span class="token keyword">import</span> time
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string">"https://passport.lagou.com/vcode/create?from=register&amp;register&amp;refresh=1513081451891"</span>
        request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"captcha.png"</span><span class="token punctuation">)</span>
        image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"captcha.png"</span><span class="token punctuation">)</span>
        text <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>


<hr>
<p>这样子你可以通过图片和输出的文字，来看tesseract识别是否准备，虽然错误还是会有的，但是一般都是可以识别出来的。</p>
<h4><a id="_32"></a>测试图片：</h4>
<hr>
<p><img src="https://img-blog.csdnimg.cn/20190309115838616.png" alt="在这里插入图片描述"></p>
<hr>
<p>识别结果为：<br>
<img src="https://img-blog.csdnimg.cn/201903091204119.png" alt="结果"></p>

                        
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/ni-zhi-dao-de-sql-shu-ju-ku-you-hua/</url>
    <content><![CDATA[ <h3><a name="t0"></a><a id="_0"></a>前言：</h3>
<p>数据库是Web应用至关重要的一个环节，其性能的优劣会影响整合Web应用，所以需要对数据库进化优化以提高使用性能。以下提供几点方法作为参考。</p>
<h2><a name="t1"></a><a id="1_SQL_3"></a>1 SQL查询优化</h2>
<ul>
<li>
<p>避免全表扫描，应考虑在 where 及 order by 涉及的列上建立索引；</p>
</li>
<li>
<p>查询时使用select明确指明所要查询的字段，避免使用<code>select *</code>的操作；</p>
</li>
<li>
<p>SQL语句尽量大写，如</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">  SELECT name FROM t WHERE id=1

<p>对于小写的sql语句，通常数据库在解析sql语句时，通常会先转换成大写再执行。</p>
</li>
<li>
<p>尽量避免在 where 子句中使用!=或&lt;&gt;操作符， MySQL只有对以下操作符才使用索引：&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE；</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">  SELECT id FROM t WHERE name LIKE ‘abc%’

</li>
<li>
<p>对于模糊查询，如：</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">  SELECT id FROM t WHERE name LIKE ‘%abc%’

<p>或者</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">  SELECT id FROM t WHERE name LIKE ‘%abc’

<p>将导致全表扫描，应避免使用，若要提高效率，可以考虑全文检索；</p>
</li>
<li>
<p>遵循最左原则，在where子句中写查询条件时把索引字段放在前面，如</p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">  mobile为索引字段，name为非索引字段
  推荐
  SELECT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FROM t WHERE mobile<span class="token operator">=</span><span class="token string">'13911111111'</span> AND name<span class="token operator">=</span><span class="token string">'python'</span>
  不推荐
  SELECT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FROM t WHERE name<span class="token operator">=</span><span class="token string">'python'</span> AND mobile<span class="token operator">=</span><span class="token string">'13911111111'</span> 
  建立了复合索引 key<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
  推荐
  SELECT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FROM t WHERE a<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> AND b<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> AND c<span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  SELECT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FROM t WHERE a<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> AND b<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  SELECT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FROM t WHERE a<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  不推荐 <span class="token punctuation">(</span>字段出现顺序不符合索引建立的顺序<span class="token punctuation">)</span>
  SELECT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FROM t WHERE b<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> AND c<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  SELECT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FROM t WHERE b<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> AND a<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> AND c<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


</li>
<li>
<p>能使用关联查询解决的尽量不要使用子查询，如</p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">  子查询
  SELECT article_id<span class="token punctuation">,</span> title FROM t_article WHERE user_id IN <span class="token punctuation">(</span>SELECT user_id FROM t_user  WHERE user_name IN <span class="token punctuation">(</span><span class="token string">'itcast'</span><span class="token punctuation">,</span> <span class="token string">'itheima'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  关联查询<span class="token punctuation">(</span>推荐<span class="token punctuation">)</span>
  SELECT b<span class="token punctuation">.</span>article_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>title From t_user AS a INNER JOIN t_article AS b ON a<span class="token punctuation">.</span>user_id<span class="token operator">=</span>b<span class="token punctuation">.</span>user_id WHERE a<span class="token punctuation">.</span>user_name IN <span class="token punctuation">(</span><span class="token string">'itcast'</span><span class="token punctuation">,</span> <span class="token string">'itheima'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<p>***能不使用关联查询的尽量不要使用关联查询；</p>
</li>
<li>
<p>不需要获取全表数据的时候，不要查询全表数据，使用LIMIT来限制数据。</p>
</li>
</ul>
<h2><a name="t2"></a><a id="2__72"></a>2 数据库优化</h2>
<p><code>关于表优化：</code></p>
<ul>
<li>在进行表设计时，可适度增加冗余字段(反范式设计)，减少JOIN操作；</li>
<li>多字段表可以进行垂直分表优化，多数据表可以进行水平分表优化；</li>
</ul>
<p><code>关于SQL优化：</code></p>
<ul>
<li>使用慢查询工具找出效率低下的SQL语句进行优化</li>
<li>对较频繁的作为查询条件的字段创建索引；唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件；更新非常频繁的字段不适合创建索引；</li>
<li>选择恰当的数据类型，如整型的选择；</li>
</ul>
<p><code>其他优化：</code></p>
<ul>
<li>对于强调快速读取的操作，可以考虑使用MyISAM数据库引擎；</li>
<li>构建缓存，减少数据库磁盘操作；</li>
<li>可以考虑结合使用内在型数据库，如Redis，进行混合存储。</li>
</ul>

             
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/ru-he-gao-xiao-xue-xi/</url>
    <content><![CDATA[<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><h4 id="默认阅读顺序：从右→左，顺时针方向。"><a href="#默认阅读顺序：从右→左，顺时针方向。" class="headerlink" title="默认阅读顺序：从右→左，顺时针方向。"></a>默认阅读顺序：从右→左，顺时针方向。</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvYWllbGYvd29haWVsZi5naXRodWIuaW8vbWFzdGVyL19wb3N0cy9QaWMvMTcwMy8xNzAzMDUtMS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
<h1 id="精彩摘录"><a href="#精彩摘录" class="headerlink" title="精彩摘录"></a>精彩摘录</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 如果只用一种方式了解某样事物，你就不会真正了解它。了解事物真正含义的秘密取决于如何将其与我们所了解的其他事物相联系。
* 其实我们每个人早就掌握了站在外面看知识的本领，这就是「比喻」。
* 深入了解规则，所以也能打破它。
* 整体性学习在于创造信息的网络，一个知识与另一个知识相互关联，那些相互关联的知识网络使你真正做到对知识的完全理解。
* 建立良好的知识结构就是绘制一份优秀的地图，就是建造一座设计良好的城市。所以建立知识结构时，你的目标就是在各种知识之间建立尽可能多的联系，聪明的人会很自然地这么做，每学习一个新概念，都会自动地与其他知识相联系。
* 强有力的结构来自概念之间不断的联系，一次完成一个想法，日积月累，水到渠成。
* 获取信息而不理解是没有任何价值的，这就是所谓的填鸭式学习。
* 死记硬背式的学习仅仅是理解阶段的学习。
* 大多数人到了理解阶段就止步不前了，而聪明的人知道要超越它，方能高人一等。
* 整体性学习过程对信息的理解有三个层次，层次越高，对信息的理解越深入。首先是理解阶段，其次是拓展阶段，最后是应用阶段。
* 当你遇到比较难的课程时，首先尝试将其分解为更小的问题、缩小范围，搞清楚你真正不能理解的地方，你才可以深入阅读，跨过障碍。
* 一名整体性学习者对前面提到的公式会怎么做？先去获取，然后理解公式本来的意思，接着开始拓展它。他会问：公式是怎么来的？公式中的每个成分代表的真实含义是什么？公式中的什么成分可以做些改变？这种改变会导致结果发生什么样的变化？其他公式与这个公式有什么相同之处，又有什么不同之处？
* 整体性学习的一个附加的好处是它强迫你以不同的视角看待学科、课程和问题。任何知识都可以从抽象的原理转化为生动的图像、有趣的故事。
* 要想超出知识本身，光有热情还不够，你要寻找各种应用知识的途径（即使现在讨厌它），知识因“用”而获得新的意义。
* 快速阅读与整体性学习一样，是一项技能。这表示如果不反复练习，仅仅阅读本书毫无用处。
* 计算机科学是寻找问题的有用途径，纠错、算法都是可以借鉴到其他地方的有用思想。
* 重复练习同类问题是一种缓慢的学习方式。模型纠错是必要的，但如果你需要反反复复做同样类型的问题，你可能需要在拓展或理解阶段做更多的工作。如果你觉得不太理解某个主题，试试返回去做做拓展工作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/ru-he-huo-qu-da-liang-lian-jie-ke-kao-dai-li-ip-di-zhi/</url>
    <content><![CDATA[<br>
<img src="https://img-blog.csdnimg.cn/20190425064030893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>

<p>&nbsp;<br><br>难在怎么拥有起码5000个以上的IP地址，对于我这种平民玩家，我更喜欢免费代理，毕竟不花钱，想要免费代理的话，这个我们可以弄个Cookie池，<br>&nbsp;<br><br><strong>免费代理网站：</strong></p></p>
<div class="table-box"><table>
<thead>
<tr>
<th>代理名</th>
<th>网站</th>
</tr>
</thead>
<tbody>
<tr>
<td>快代理</td>
<td><a href="https://www.kuaidaili.com/ops/" rel="nofollow" data-token="56b09fdc960ef4b5646a2467e3ec69f1">https://www.kuaidaili.com/ops/</a></td>
</tr>
<tr>
<td>66免费代理</td>
<td><a href="http://www.66ip.cn/" rel="nofollow" data-token="f3c46547cc4aa13be3a00b50781b0e27">http://www.66ip.cn/</a></td>
</tr>
<tr>
<td>IP海</td>
<td><a href="http://www.iphai.com/" rel="nofollow" data-token="e56909ca4d55e429b46187f8bb7a160d">http://www.iphai.com/</a></td>
</tr>
<tr>
<td>国内高匿IP</td>
<td><a href="https://www.xicidaili.com/nn/" rel="nofollow" data-token="b07bab02bed3ab7dd4278a8f59a17d81">https://www.xicidaili.com/nn/</a></td>
</tr>
<tr>
<td>优代理</td>
<td><a href="http://www.data5u.com/free/gngn/index.shtml" rel="nofollow" data-token="b151c7a68ad1755ae80298c29eeb0004">http://www.data5u.com/free/gngn/index.shtml</a></td>
</tr>
</tbody>
</table></div><p>免费代理的话，有个坏处，就是，你获取到的IP代理，有一些是挺久以前，也就是大部分都是过期的了，想要弄个5000个IP地址不是问题，可是能用的，寥寥无几，我试了一下，300个大概10个可用吧，所以，我为了加快速度，忍心花钱买了三次，一次一天，IP无限量，讲真的，这些IP地址，刚刚开始，大部分都能爬取成功，那速度，真的快，只是后面，这个题目就是你爬一次，IP封一次，所以后面速度会相对满一点，等你测试通过之后，没有bug再买一天，一顿饭钱，可以换来几个小时的缩减。</p>

<div class="table-box"><table>
<thead>
<tr>
<th>代理名字</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>66代理http://www.66daili.cn/UserManage/</td>
<td>8块钱一天无限量</td>
</tr>
<tr>
<td>西瓜代理http://www.xiguadaili.com/</td>
<td>9块钱一天无限量</td>
</tr>
</tbody>
</table></div><p><strong>66代理：</strong> web接口提取：<br>
<img src="https://img-blog.csdnimg.cn/20190425065516907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">你可以用selenium来弄个自动爬取（每次IP数量1000+）<br>
&nbsp;<br>
<strong>西瓜代理：</strong> 提供web接口以及txt文档下载执行(每次IP数量100+）</p>
<p>这里我就用selenium爬取数据，然后保存到redis数据库中的代码：</p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> redis
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">import</span> time
<span class="token keyword">import</span> re
<span class="token keyword">class</span> <span class="token class-name">Redis_Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""数据库客户端"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>db <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        添加代理，设置分数为初始分数
        :param proxy: 代理
        :param score: 分数
        :return: 添加结果
        """</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span><span class="token string">"proxies"</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"proxies"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>proxy<span class="token punctuation">:</span> score<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">spider_ip</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> redis_client<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    每隔1分钟爬取一次，， 然后添加到redis数据库中
    :param url: 西瓜代理url
    :param redis_client: redis数据库客户端
    :return: None
    """</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            chrome_opetions <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
            chrome_opetions<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span>
            browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>chrome_opetions<span class="token punctuation">)</span>
            browser<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>
            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token comment"># 获取ip地址</span>
            order_id <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span>
            order_id<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
            order_id<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"555050574900674"</span><span class="token punctuation">)</span>
            check <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@name='category'][3]"</span><span class="token punctuation">)</span>
            check<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            submit_click <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"submit_button"</span><span class="token punctuation">)</span>
            submit_click<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
            browser<span class="token punctuation">.</span>switch_to_window<span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment"># 提取数据</span>
            response <span class="token operator">=</span> browser<span class="token punctuation">.</span>page_source
            text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"pre-wrap;\"&gt;(.*)&lt;\/pre.*&gt;"</span><span class="token punctuation">,</span> response<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> text <span class="token operator">==</span> <span class="token string">"ERROR|没有找到符合条件的IP"</span><span class="token punctuation">:</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
                browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"id.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>
                fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"id.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                proxy <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
                redis_client<span class="token punctuation">.</span>add<span class="token punctuation">(</span>proxy<span class="token operator">=</span>proxy<span class="token punctuation">)</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1500</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">"http://www.xiguadaili.com/web"</span>
    rc <span class="token operator">=</span> Redis_Client<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 开始爬取</span>
    spider_ip<span class="token punctuation">(</span>url<span class="token punctuation">,</span> rc<span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>


]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/shu-ju-ku-si-da-shi-wu-acid-zhi-ge-chi-ji-bie-yi-ji-ge-chong-suo-de-xiang-jie/</url>
    <content><![CDATA[  <h4><a id="_0"></a>四大特性：</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>四大特性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>原子性</code></td>
<td>一个事务要么成功，要么失败</td>
</tr>
<tr>
<td><code>一致性</code></td>
<td>一个事务执行之前跟执行之后状态保持一致</td>
</tr>
<tr>
<td>例</td>
<td>A和B一共100元，无论中间转账多少次、转多少，最终两人的钱加一起还是100元</td>
</tr>
<tr>
<td><code>隔离性</code></td>
<td>两个事务之间互不干扰</td>
</tr>
<tr>
<td>例</td>
<td>A给B转账，不会影响到B给C转账，属于两个事务</td>
</tr>
<tr>
<td><code>持久性</code></td>
<td>事务一旦提交，永久保存</td>
</tr>
</tbody>
</table></div><h4><a id="_10"></a>隔离级别</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>隔离级别</th>
<th>可能出现的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>读未提交（Read Uncommitted）</code></td>
<td>最危险，什么情况都有可能发生：脏读、不可重复读、幻读</td>
</tr>
<tr>
<td><code>读已提交（Read Committed）</code></td>
<td>防止脏读、但可能会出现不可重复读、幻读</td>
</tr>
<tr>
<td><code>可重复读（Repeatable Read）</code></td>
<td>数据库<code>默认</code>隔离级别，但也有可能出现幻读</td>
</tr>
<tr>
<td><code>串行化（Serializable）</code></td>
<td>级别最高，相当与单线程，全表锁，一次只能执行一个事务，相应的执行效率最差</td>
</tr>
</tbody>
</table></div><hr>
<h4><a id="_19"></a>注意：</h4>
<p>1.隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。<br>
2.对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为<code>Read Committed</code>。<br>
3.Read Committed，它能够避免脏读取，而且具有较好的并发性能。虽然它会导致不可重复读、幻读，但是可以用悲观锁和乐观锁解决。</p>
<h4><a id="1_24"></a>1.查看数据库隔离级别？</h4>
<p><code>show variables like "%isolation%”;</code><br>
或<br>
<code>select @@tx_isolation;</code></p>
<p>事务隔离之前是如下结果：</p>

<div class="table-box"><table>
<thead>
<tr>
<th>Variable_name</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>transaction_isolation</td>
<td><code>REPEATABLE-READ</code></td>
</tr>
<tr>
<td>tx_isolation</td>
<td><code>REPEATABLE-READ</code></td>
</tr>
</tbody>
</table></div><h4><a id="2read_committed_35"></a>2.把隔离级别修改为read committed</h4>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">全局修改
<span class="token builtin">set</span> <span class="token keyword">global</span> transaction isolation level read committed<span class="token punctuation">;</span>
本次事务修改
<span class="token builtin">set</span> session transaction isolation level read committed<span class="token punctuation">;</span>

<p>事务修改之后是如下结果：</p>

<div class="table-box"><table>
<thead>
<tr>
<th>Variable_name</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>transaction_isolation</td>
<td><code>READ-COMMITTED</code></td>
</tr>
<tr>
<td>tx_isolation</td>
<td><code>READ-COMMITTED</code></td>
</tr>
</tbody>
</table></div><hr>
<h5><a id="_52"></a>悲观锁</h5>
<p>悲观锁：跟表锁差不多，以订单为例：当用户a查询库存时，先上锁，如果不释放锁，可能一直造成阻塞，甚至会出现死锁的情况。</p>
<h5><a id="_54"></a>乐观锁</h5>
<p>乐观锁：每个用户更改库存之前都会先查询一下，如果和之前查的库存一样，就更改库存，如果不一样就重新查询，看购买量是否小于库存，如果小于库存，也可以下单。</p>
<h5><a id="_57"></a>排它锁</h5>
<p>对于UPDATE、DELETE、INSERT语句句，InnoDB会⾃自动给涉及数据集加排他锁(X)</p>
<h5><a id="_60"></a>读锁、写锁</h5>
<p>MyISAM在执⾏查询语句SELECT前，会⾃自动给涉及的所有表加读锁，在执⾏更新操作(UPDATE、DELETE、INSERT等)前，会⾃动添加写锁，这个过程并不不需要用户⼲预，所以，只会在某些特定的场景下才需要⼿动加锁。</p>
<h5><a id="_63"></a>表锁</h5>
<p>开销⼩，加锁快;不会出现死锁;锁定力度⼤，发⽣锁冲突概率高，并发度最低</p>
<h5><a id="_65"></a>行锁</h5>
<p>开销大，加锁慢;会出现死锁;锁定粒度小，发⽣锁冲突的概率低，并发度⾼</p>
<h6><a id="InnoDB__MyISAM_69"></a><code>InnoDB既支持行锁也支持表锁。 MyISAM只⽀支持表锁</code></h6>
<p>InnoDB的行锁是基于索引的，只有通过索引条件检索数据才使⽤行级锁，否则，InnoDB将使用表锁。</p>
<p>读锁和写锁是互斥的，读写操作是串⾏。 如果某个进程想要获取读锁，同时另外⼀个进程想要获取写锁。在mysql⾥边，写锁是优先于读锁的!</p>
<p>写锁和读锁优先级的问题是可以通过参数调节的:max_write_lock_count和low_priority_updates</p>
<p>MyISAM可以⽀持查询和插入操作的并发进行。可以通过系统变量concurrent_insert来指定哪种模式，在MyISAM中它默认是:如果MyISAM有空洞(即表的中间没有被删除的行)，MyISAM允许在一个进程读表的同时，另一个进程从表尾插⼊记录。 但是InnoDB存储引擎是不支持的!</p>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/ji-yan-hua-kuai-yan-zheng-ma-po-jie-zui-xin-ban/</url>
    <content><![CDATA[<h2 id="一、简述："><a href="#一、简述：" class="headerlink" title="一、简述："></a>一、简述：</h2><pre><code>   最近无聊想搞一下极验的滑块验证码破解这块，发现破解js代码耗时又耗力出现版本更新可能以前的所有努力都要推翻重做，不够通用性，最后还是选用selenium + PIL 来实现滑块验证码的破解。
   期间也翻阅过很多文章,大多都已经失效，并且缺口位置查找和模拟滑动轨迹成功率很低，很难应用到实际开发项目中，本次是针对最新版本的极验滑块验证码进行破解。
</code></pre>
<h2 id="二、项目环境"><a href="#二、项目环境" class="headerlink" title="二、项目环境"></a>二、项目环境</h2><p>大致需要用到以下模块各位看观请提前准备好:<br>python3.6、selenium、numpy、PIL、chromedriver</p>
<h2 id="三、分析步骤以及代码编写"><a href="#三、分析步骤以及代码编写" class="headerlink" title="三、分析步骤以及代码编写"></a>三、分析步骤以及代码编写</h2><p>首先分析目标网站（本次主要以geetest官网滑块demo为参考）<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODA5MjMwNS0yMDNiYWI3MmYzNmYzYmYzLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>网站大致长这个样子，首先f12打开 开发者工具选择Elements查看节点，发现最新版本的滑块图片是使用画布来进行呈现的，期间查阅大量文档，使用如下代码获得画布中的图片数据，获取到的图片是base64进行编码的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">document.getElementsByClassName<span class="token punctuation">(</span><span class="token string">"geetest_canvas_bg geetest_absolute"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.toDataURL<span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODA5MjMwNS1iNDNlM2NhNzBjY2Y3OTcwLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>2.通过分析发现这两个画布放的是所需要的背景图和缺口图（其实一眼就看出来的）<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODA5MjMwNS0xOWJjZjIyNWM4NTliYjQyLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>3。接下来就是代码的编写了<br>3.1 首先是获得背景图和缺口图的数据</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def get_images<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:
        <span class="token string">""</span>"
        获取验证码图片
        :return: 图片的location信息
        <span class="token string">""</span>"
        time.sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        self.browser.web_driver_wait_ruishu<span class="token punctuation">(</span><span class="token number">10</span>, <span class="token string">"class"</span>, <span class="token string">'geetest_canvas_slice'</span><span class="token punctuation">)</span>
        fullgb <span class="token operator">=</span> self.browser.execute_js<span class="token punctuation">(</span><span class="token string">'document.getElementsByClassName("geetest_canvas_bg geetest_'</span>
                                             <span class="token string">'absolute")[0].toDataURL("image/png")'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span>

        <span class="token function">bg</span> <span class="token operator">=</span> self.browser.execute_js<span class="token punctuation">(</span><span class="token string">'document.getElementsByClassName("geetest_canvas_fullbg geetest_fade'</span>
                                         <span class="token string">' geetest_absolute")[0].toDataURL("image/png")'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span>
        <span class="token builtin class-name">return</span> bg, fullgb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.2 对数据进行解码操作并保存图片</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def get_decode_image<span class="token punctuation">(</span>self, filename, location_list<span class="token punctuation">)</span>:
        <span class="token string">""</span>"
        解码base64数据
        <span class="token string">""</span>"
        _, img <span class="token operator">=</span> location_list.split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>
        img <span class="token operator">=</span> base64.decodebytes<span class="token punctuation">(</span>img.encode<span class="token punctuation">(</span><span class="token punctuation">))</span>
        new_im: image.Image <span class="token operator">=</span> image.open<span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>img<span class="token punctuation">))</span>

        <span class="token builtin class-name">return</span> new_im<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.3 接下来就是计算缺口位置了(这里使用的PIL中计算两张图片的差值获得缺口位置)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def compute_gap<span class="token punctuation">(</span>self, img1, img2<span class="token punctuation">)</span>:
        <span class="token string">""</span>"计算缺口偏移 这种方式成功率很高<span class="token string">""</span>"
        <span class="token comment"># 将图片修改为RGB模式</span>
        img1 <span class="token operator">=</span> img1.convert<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">)</span>
        img2 <span class="token operator">=</span> img2.convert<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">)</span>

        <span class="token comment"># 计算差值</span>
        <span class="token function">diff</span> <span class="token operator">=</span> ImageChops.difference<span class="token punctuation">(</span>img1, img2<span class="token punctuation">)</span>

        <span class="token comment"># 灰度图</span>
        <span class="token function">diff</span> <span class="token operator">=</span> diff.convert<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span>

        <span class="token comment"># 二值化</span>
        <span class="token function">diff</span> <span class="token operator">=</span> diff.point<span class="token punctuation">(</span>self.table, <span class="token string">'1'</span><span class="token punctuation">)</span>

        left <span class="token operator">=</span> <span class="token number">43</span>
        <span class="token comment"># 这里做了优化为减少误差 纵坐标的像素点大于5时才认为是找到</span>
        <span class="token comment"># 防止缺口有凸起时有误差</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">w</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span>left, diff.size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>:
            lis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> <span class="token for-or-select variable">h</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span>diff.size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>:
                <span class="token keyword">if</span> diff.load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>w, h<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span>:
                    lis.append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
                <span class="token keyword">if</span> len<span class="token punctuation">(</span>lis<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span>:
                    <span class="token builtin class-name">return</span> w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.4 当滑块的缺口位置找到以后就需要生成滑动轨迹(其中加20是保证在滑动时先超过缺口位置然后在慢慢还原到正确位置)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def ease_out_quart<span class="token punctuation">(</span>self, x<span class="token punctuation">)</span>:
        <span class="token builtin class-name">return</span> <span class="token number">1</span> - pow<span class="token punctuation">(</span><span class="token number">1</span> - x, <span class="token number">4</span><span class="token punctuation">)</span>

    def get_tracks_2<span class="token punctuation">(</span>self, distance, seconds, ease_func<span class="token punctuation">)</span>:
        <span class="token string">""</span>"
        根据轨迹离散分布生成的数学 生成  <span class="token comment"># 参考文档  https://www.jianshu.com/p/3f968958af5a</span>
        成功率很高 <span class="token number">90</span>% 往上
        :param distance: 缺口位置
        :param seconds:  时间
        :param ease_func: 生成函数
        :return: 轨迹数组
        <span class="token string">""</span>"
        distance <span class="token operator">+=</span> <span class="token number">20</span>
        tracks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        offsets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">t</span> <span class="token keyword">in</span> np.arange<span class="token punctuation">(</span><span class="token number">0.0</span>, seconds, <span class="token number">0.1</span><span class="token punctuation">)</span>:
            ease <span class="token operator">=</span> ease_func
            offset <span class="token operator">=</span> round<span class="token punctuation">(</span>ease<span class="token punctuation">(</span>t / seconds<span class="token punctuation">)</span> * distance<span class="token punctuation">)</span>
            tracks.append<span class="token punctuation">(</span>offset - offsets<span class="token punctuation">[</span>-1<span class="token punctuation">]</span><span class="token punctuation">)</span>
            offsets.append<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>
        tracks.extend<span class="token punctuation">(</span><span class="token punctuation">[</span>-3, -2, -3, -2, -2, -2, -2, -1, -0, -1, -1, -1<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token builtin class-name">return</span> tracks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.5 最后也就是滑动滑块到缺口位置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def move_to_gap<span class="token punctuation">(</span>self, track<span class="token punctuation">)</span>:
       <span class="token string">""</span>"移动滑块到缺口处<span class="token string">""</span>"
       slider <span class="token operator">=</span> self.wait.until<span class="token punctuation">(</span>EC.presence_of_element_located<span class="token variable"><span class="token punctuation">((</span>By.CLASS_NAME<span class="token punctuation">,</span> 'geetest_slider_button'<span class="token punctuation">))</span></span><span class="token punctuation">)</span>
       ActionChains<span class="token punctuation">(</span>self.browser<span class="token punctuation">)</span>.click_and_hold<span class="token punctuation">(</span>slider<span class="token punctuation">)</span>.perform<span class="token punctuation">(</span><span class="token punctuation">)</span>

       <span class="token keyword">while</span> track:
           x <span class="token operator">=</span> track.pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
           ActionChains<span class="token punctuation">(</span>self.browser<span class="token punctuation">)</span>.move_by_offset<span class="token punctuation">(</span>xoffset<span class="token operator">=</span>x, <span class="token assign-left variable">yoffset</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>.perform<span class="token punctuation">(</span><span class="token punctuation">)</span>
           time.sleep<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span>

       ActionChains<span class="token punctuation">(</span>self.browser<span class="token punctuation">)</span>.release<span class="token punctuation">(</span><span class="token punctuation">)</span>.perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="贴出完整代码"><a href="#贴出完整代码" class="headerlink" title="贴出完整代码"></a>贴出完整代码</h4><p>(注意selenium有些方法会被极验检测到所以使用js命令直接运行的方式来达到效果)</p>
<p>crack.py</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -*-coding:utf-8 -*-</span>
<span class="token function">import</span> base64
<span class="token function">import</span> <span class="token function">time</span>
<span class="token function">import</span> functools
<span class="token function">import</span> numpy as np

from tools.selenium_spider <span class="token function">import</span> SeleniumSpider

from selenium.webdriver <span class="token function">import</span> ActionChains
from selenium.webdriver.support <span class="token function">import</span> expected_conditions as EC
from selenium.webdriver.support.ui <span class="token function">import</span> WebDriverWait
from selenium.webdriver.common.by <span class="token function">import</span> By
<span class="token function">import</span> PIL.Image as image
from PIL <span class="token function">import</span> ImageChops, PngImagePlugin
from io <span class="token function">import</span> BytesIO


class Crack<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:
    <span class="token string">""</span>"
    解决三代极验滑块验证码
    <span class="token string">""</span>"
    def __init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:
        self.url <span class="token operator">=</span> <span class="token string">'https://www.geetest.com'</span>
        self.browser <span class="token operator">=</span> SeleniumSpider<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/personalwork/personal_tools_project/adbtools/chromedriver"</span>, <span class="token assign-left variable">max_window</span><span class="token operator">=</span>True<span class="token punctuation">)</span>
        self.wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>self.browser, <span class="token number">100</span><span class="token punctuation">)</span>
        self.BORDER <span class="token operator">=</span> <span class="token number">8</span>
        self.table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>:
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">50</span>:
                self.table.append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            else:
                self.table.append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    def open<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:
        <span class="token string">""</span>"
        打开浏览器,并输入查询内容
        <span class="token string">""</span>"
        self.browser.get<span class="token punctuation">(</span>self.url<span class="token punctuation">)</span>
        self.browser.get<span class="token punctuation">(</span>self.url + <span class="token string">"/Sensebot/"</span><span class="token punctuation">)</span>
        self.browser.web_driver_wait_ruishu<span class="token punctuation">(</span><span class="token number">10</span>, <span class="token string">"class"</span>, <span class="token string">'experience--area'</span><span class="token punctuation">)</span>
        time.sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        self.browser.execute_js<span class="token punctuation">(</span><span class="token string">'document.getElementsByClassName("experience--area")[0].getElementsByTagName("div")'</span>
                                <span class="token string">'[2].getElementsByTagName("ul")[0].getElementsByTagName("li")[1].click()'</span><span class="token punctuation">)</span>

        time.sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        self.browser.web_driver_wait_ruishu<span class="token punctuation">(</span><span class="token number">10</span>, <span class="token string">"class"</span>, <span class="token string">'geetest_radar_tip'</span><span class="token punctuation">)</span>

        self.browser.execute_js<span class="token punctuation">(</span><span class="token string">'document.getElementsByClassName("geetest_radar_tip")[0].click()'</span><span class="token punctuation">)</span>

    def check_status<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:
        <span class="token string">""</span>"
        检测是否需要滑块验证码
        :return:
        <span class="token string">""</span>"
        self.browser.web_driver_wait_ruishu<span class="token punctuation">(</span><span class="token number">10</span>, <span class="token string">"class"</span>, <span class="token string">'geetest_success_radar_tip_content'</span><span class="token punctuation">)</span>
        try:
            time.sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
            message <span class="token operator">=</span> self.browser.find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"geetest_success_radar_tip_content"</span><span class="token punctuation">)</span>.text
            <span class="token keyword">if</span> message <span class="token operator">==</span> <span class="token string">"验证成功"</span><span class="token builtin class-name">:</span>
                <span class="token builtin class-name">return</span> False
            else:
                <span class="token builtin class-name">return</span> True
        except Exception as e:
            <span class="token builtin class-name">return</span> True

    def get_images<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:
        <span class="token string">""</span>"
        获取验证码图片
        :return: 图片的location信息
        <span class="token string">""</span>"
        time.sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        self.browser.web_driver_wait_ruishu<span class="token punctuation">(</span><span class="token number">10</span>, <span class="token string">"class"</span>, <span class="token string">'geetest_canvas_slice'</span><span class="token punctuation">)</span>
        fullgb <span class="token operator">=</span> self.browser.execute_js<span class="token punctuation">(</span><span class="token string">'document.getElementsByClassName("geetest_canvas_bg geetest_'</span>
                                             <span class="token string">'absolute")[0].toDataURL("image/png")'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span>

        <span class="token function">bg</span> <span class="token operator">=</span> self.browser.execute_js<span class="token punctuation">(</span><span class="token string">'document.getElementsByClassName("geetest_canvas_fullbg geetest_fade'</span>
                                         <span class="token string">' geetest_absolute")[0].toDataURL("image/png")'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span>
        <span class="token builtin class-name">return</span> bg, fullgb

    def get_decode_image<span class="token punctuation">(</span>self, filename, location_list<span class="token punctuation">)</span>:
        <span class="token string">""</span><span class="token string">"
        解码base64数据
        "</span>"<span class="token string">"
        _, img = location_list.split("</span>,<span class="token string">")
        img = base64.decodebytes(img.encode())
        new_im: PngImagePlugin.PngImageFile = image.open(BytesIO(img))
        # new_im.convert("</span>RGB<span class="token string">")
        # new_im.save(filename)

        return new_im

    def compute_gap(self, img1, img2):
        "</span>"<span class="token string">"计算缺口偏移 这种方式成功率很高"</span>"<span class="token string">"
        # 将图片修改为RGB模式
        img1 = img1.convert("</span>RGB<span class="token string">")
        img2 = img2.convert("</span>RGB<span class="token string">")

        # 计算差值
        diff = ImageChops.difference(img1, img2)

        # 灰度图
        diff = diff.convert("</span>L<span class="token string">")

        # 二值化
        diff = diff.point(self.table, '1')

        left = 43

        for w in range(left, diff.size[0]):
            lis = []
            for h in range(diff.size[1]):
                if diff.load()[w, h] == 1:
                    lis.append(w)
                if len(lis) > 5:
                    return w

    def ease_out_quad(self, x):
        return 1 - (1 - x) * (1 - x)

    def ease_out_quart(self, x):
        return 1 - pow(1 - x, 4)

    def ease_out_expo(self, x):
        if x == 1:
            return 1
        else:
            return 1 - pow(2, -10 * x)

    def get_tracks_2(self, distance, seconds, ease_func):
        "</span>"<span class="token string">"
        根据轨迹离散分布生成的数学 生成  # 参考文档  https://www.jianshu.com/p/3f968958af5a
        成功率很高 90% 往上
        :param distance: 缺口位置
        :param seconds:  时间
        :param ease_func: 生成函数
        :return: 轨迹数组
        "</span>"<span class="token string">"
        distance += 20
        tracks = [0]
        offsets = [0]
        for t in np.arange(0.0, seconds, 0.1):
            ease = ease_func
            offset = round(ease(t / seconds) * distance)
            tracks.append(offset - offsets[-1])
            offsets.append(offset)
        tracks.extend([-3, -2, -3, -2, -2, -2, -2, -1, -0, -1, -1, -1])
        return tracks

    def get_track(self, distance):
        "</span>"<span class="token string">"
        根据物理学生成方式   极验不能用 成功率基本为0
        :param distance: 偏移量
        :return: 移动轨迹
        "</span>"<span class="token string">"
        distance += 20
        # 移动轨迹
        track = []
        # 当前位移
        current = 0
        # 减速阈值
        mid = distance * 3 / 5
        # 计算间隔
        t = 0.5
        # 初速度
        v = 0

        while current &lt; distance:
            if current &lt; mid:
                # 加速度为正2
                a = 2
            else:
                # 加速度为负3
                a = -3
            # 初速度v0
            v0 = v
            # 当前速度v = v0 + at
            v = v0 + a * t
            # 移动距离x = v0t + 1/2 * a * t^2
            move = v0 * t + 0.5 * a * (t ** 2)
            # 当前位移
            current += move
            # 加入轨迹
            track.append(round(move))
        track.extend([-3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1])
        return track

    def move_to_gap(self, track):
        "</span>"<span class="token string">"移动滑块到缺口处"</span>"<span class="token string">"
        slider = self.wait.until(EC.presence_of_element_located<span class="token variable"><span class="token punctuation">((</span>By.CLASS_NAME<span class="token punctuation">,</span> 'geetest_slider_button'<span class="token punctuation">))</span></span>)
        ActionChains(self.browser).click_and_hold(slider).perform()

        while track:
            x = track.pop(0)
            ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=0).perform()
            time.sleep(0.02)

        ActionChains(self.browser).release().perform()

    def crack(self, n):
        # 打开浏览器
        self.open()

        if self.check_status():
            # 保存的图片名字
            bg_filename = 'bg.png'
            fullbg_filename = 'fullbg.png'

            # 获取图片
            bg_location_base64, fullbg_location_64 = self.get_images()

            # 根据位置对图片进行合并还原
            bg_img = self.get_decode_image(bg_filename, bg_location_base64)
            fullbg_img = self.get_decode_image(fullbg_filename, fullbg_location_64)
            # 获取缺口位置
            gap = self.compute_gap(fullbg_img, bg_img)
            print('缺口位置', gap)

            track = self.get_tracks_2(gap - self.BORDER, 1, self.ease_out_quart)
            print("</span>滑动轨迹<span class="token string">", track)
            print("</span>滑动距离<span class="token string">", functools.reduce(lambda x, y: x+y, track))
            self.move_to_gap(track)

            time.sleep(1)
            if not self.check_status():
                print('验证成功')
                return True
            else:
                print('验证失败')
                # 保存图片方便调试
                bg_img.save(f"</span>bg_img<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span>.png<span class="token string">")
                fullbg_img.save(f"</span>fullbg<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span>.png<span class="token string">")
                return False

        else:
            print("</span>验证成功<span class="token string">")
            return True


if __name__ == '__main__':
    print('开始验证')
    crack = Crack()
    # crack.crack(0)
    count = 0
    for i in range(200):
        if crack.crack(i):
            count += 1
    print(f"</span>成功率：<span class="token punctuation">&#123;</span>count / <span class="token number">200</span> * <span class="token number">100</span><span class="token punctuation">&#125;</span>%"<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>selenium_spider.py</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/local/bin/python</span>
<span class="token comment"># coding:utf-8</span>

<span class="token string">""</span>"
@author: Liubing
@software: PyCharm
@file: selenium_spider.py
@time: <span class="token number">2019</span>-03-11 <span class="token number">13</span>:46
@describe: 基于selenium版本进一步封装 只针对于谷歌浏览器 其他浏览器需要自己封装
<span class="token string">""</span>"
<span class="token function">import</span> json
<span class="token function">import</span> <span class="token function">time</span> as time_

from lxml <span class="token function">import</span> etree
from selenium.webdriver.support.wait <span class="token function">import</span> WebDriverWait
from selenium.webdriver.support <span class="token function">import</span> expected_conditions as EC
from selenium.webdriver.chrome.webdriver <span class="token function">import</span> WebDriver
from selenium.webdriver.chrome.options <span class="token function">import</span> Options


class SeleniumSpider<span class="token punctuation">(</span>WebDriver<span class="token punctuation">)</span>:
   <span class="token string">""</span>"基于selenium进一步封装<span class="token string">""</span>"

   def __init__<span class="token punctuation">(</span>self, path, <span class="token assign-left variable">params</span><span class="token operator">=</span>None, <span class="token assign-left variable">max_window</span><span class="token operator">=</span>False, *args, **kwargs<span class="token punctuation">)</span>:
       <span class="token string">""</span>"
       初始化
       :param path: str selenium驱动路径
       :param params: list driver 附加参数
       :param args: tuple
       :param kwargs:
       <span class="token string">""</span>"
       self.__path <span class="token operator">=</span> path
       self.__params <span class="token operator">=</span> params
       <span class="token comment"># 初始化</span>
       self.__options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>
       self.__options.add_argument<span class="token punctuation">(</span><span class="token string">'--dns-prefetch-disable'</span><span class="token punctuation">)</span>
       self.__options.add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>  <span class="token comment"># 谷歌文档提到需要加上这个属性来规避bug</span>
       self.__options.add_argument<span class="token punctuation">(</span><span class="token string">'disable-infobars'</span><span class="token punctuation">)</span>  <span class="token comment"># 隐藏"Chrome正在受到自动软件的控制"</span>
       <span class="token comment"># self.__options.add_argument('--headless')</span>
       self.is_maximize_window <span class="token operator">=</span> max_window  <span class="token comment"># 是否开启全屏模式</span>

       <span class="token comment"># 过检测 具体参考文档: https://juejin.im/post/5c62b6d5f265da2dab17ae3c</span>
       self.__options.add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span>, <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

       <span class="token keyword">if</span> params:
           <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> params:
               self.__options.add_argument<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
       super<span class="token punctuation">(</span>SeleniumSpider, self<span class="token punctuation">)</span>.__init__<span class="token punctuation">(</span>executable_path<span class="token operator">=</span>self.__path, <span class="token assign-left variable">options</span><span class="token operator">=</span>self.__options, *args, **kwargs<span class="token punctuation">)</span>
       <span class="token comment"># 过检测准备工作</span>
       self.execute_chrome_protocol_js<span class="token punctuation">(</span>
           <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"Page.addScriptToEvaluateOnNewDocument"</span>,
           <span class="token assign-left variable">params</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"source"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>"
           Object.defineProperty<span class="token punctuation">(</span>navigator, <span class="token string">'webdriver'</span>, <span class="token punctuation">&#123;</span>
           get: <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> false,
           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">""</span>"<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> self.is_maximize_window:
           self.maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>

       <span class="token comment"># 规则部分</span>
       self.ID <span class="token operator">=</span> <span class="token string">"id"</span>
       self.XPATH <span class="token operator">=</span> <span class="token string">"xpath"</span>
       self.LINK_TEXT <span class="token operator">=</span> <span class="token string">"link text"</span>
       self.PARTIAL_LINK_TEXT <span class="token operator">=</span> <span class="token string">"partial link text"</span>
       self.NAME <span class="token operator">=</span> <span class="token string">"name"</span>
       self.TAG_NAME <span class="token operator">=</span> <span class="token string">"tag name"</span>
       self.CLASS_NAME <span class="token operator">=</span> <span class="token string">"class name"</span>
       self.CSS_SELECTOR <span class="token operator">=</span> <span class="token string">"css selector"</span>

   def cookies_dict_to_selenium_cookies<span class="token punctuation">(</span>self, cookies: dict, domain<span class="token punctuation">)</span>:
       <span class="token string">""</span>"
       requests cookies 转换到 selenium cookies
       :param cookies: requests cookies
       :return: selenium 支持的cookies
       <span class="token string">""</span>"
       temp_cookies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
       <span class="token keyword">for</span> key, value <span class="token keyword">in</span> cookies.items<span class="token punctuation">(</span><span class="token punctuation">)</span>:
           <span class="token comment"># requests 有bug 域区分的不是很清楚 手动区分 只限全国电信接口能用</span>
           temp_cookies.append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token builtin class-name">:</span> key, <span class="token string">"value"</span><span class="token builtin class-name">:</span> value, <span class="token string">"domain"</span><span class="token builtin class-name">:</span> domain<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
       <span class="token builtin class-name">return</span> temp_cookies

   def get<span class="token punctuation">(</span>self, url: str, <span class="token assign-left variable">cookies</span><span class="token operator">=</span>None, <span class="token assign-left variable">domain</span><span class="token operator">=</span>None<span class="token punctuation">)</span>:
       <span class="token string">""</span>"
       请求数据
       :param url: 待请求的url
       :param cookies: 添加cookies cookies 格式 <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token builtin class-name">:</span> key, <span class="token string">"value"</span><span class="token builtin class-name">:</span> value, <span class="token string">"domain"</span><span class="token builtin class-name">:</span> domain<span class="token punctuation">&#125;</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
       :param domain: cookie作用域
       :return:
       <span class="token string">""</span>"
       super<span class="token punctuation">(</span><span class="token punctuation">)</span>.get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
       <span class="token keyword">if</span> cookies:
           <span class="token comment"># 执行</span>
           <span class="token keyword">if</span> type<span class="token punctuation">(</span>cookies<span class="token punctuation">)</span> <span class="token operator">==</span> list:
               <span class="token keyword">for</span> <span class="token for-or-select variable">cookie</span> <span class="token keyword">in</span> cookies:
                   <span class="token keyword">if</span> <span class="token string">"name"</span> <span class="token keyword">in</span> cookie.keys<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token string">"value"</span> <span class="token keyword">in</span> cookie.keys<span class="token punctuation">(</span><span class="token punctuation">)</span> and <span class="token string">"domain"</span> <span class="token keyword">in</span> cookie.keys<span class="token punctuation">(</span><span class="token punctuation">)</span>:
                       self.add_cookie<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>
                   else:
                       raise TypeError<span class="token punctuation">(</span><span class="token string">'cookies错误请传入正确格式[&#123;"name": key, "value": value, "domain": domain&#125;,...'</span>
                                       <span class="token string">'] 或者&#123;key: vale,...&#125;'</span><span class="token punctuation">)</span>
           <span class="token keyword">elif</span> type<span class="token punctuation">(</span>cookies<span class="token punctuation">)</span> <span class="token operator">==</span> dict:
               <span class="token keyword">if</span> domain:
                   <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> self.cookies_dict_to_selenium_cookies<span class="token punctuation">(</span>cookies, domain<span class="token punctuation">)</span>:
                       self.add_cookie<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
               else:
                   raise ValueError<span class="token punctuation">(</span><span class="token string">"&#123;key:vale&#125;格式必须传入doamin参数"</span><span class="token punctuation">)</span>
           <span class="token comment"># 刷新页面</span>
           self.refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>

   def web_driver_wait<span class="token punctuation">(</span>self, time: int, rule: str, num: str<span class="token punctuation">)</span>:
       <span class="token string">""</span>"
       页面等待  瑞数产品弃用这种方法 不然会400错误
       :param time: 等待时间
       :param rule: 规则 <span class="token punctuation">[</span>id, xpath, <span class="token function">link</span> text, partial <span class="token function">link</span> text, name, tag name, class name, css selector<span class="token punctuation">]</span>
       :param num: 根据元素id
       :return:
       <span class="token string">""</span>"
       WebDriverWait<span class="token punctuation">(</span>self, time, <span class="token number">0.5</span><span class="token punctuation">)</span>.until<span class="token punctuation">(</span>
           EC.presence_of_element_located<span class="token variable"><span class="token punctuation">((</span>rule<span class="token punctuation">,</span> num<span class="token punctuation">))</span></span><span class="token punctuation">)</span>

   def web_driver_wait_ruishu<span class="token punctuation">(</span>self, time: int, rule: str, num: str<span class="token punctuation">)</span>:
       <span class="token string">""</span>"
       笨方法 遍历页面匹配
       :param time: 等待时间
       :param rule: 规则 <span class="token punctuation">[</span>id, class<span class="token punctuation">]</span>
       :param num: 根据元素id
       :return:
       <span class="token string">""</span>"
       <span class="token keyword">while</span> time:
           response <span class="token operator">=</span> self.execute_js<span class="token punctuation">(</span><span class="token string">"document.documentElement.outerHTML"</span><span class="token punctuation">)</span>
           try:
               html <span class="token operator">=</span> etree.HTML<span class="token punctuation">(</span>text<span class="token operator">=</span>response<span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
               inp <span class="token operator">=</span> html.xpath<span class="token punctuation">(</span><span class="token string">"//*[contains(@%s, '%s')]"</span> % <span class="token punctuation">(</span>rule, num<span class="token punctuation">))</span>
               <span class="token keyword">if</span> inp:
                   <span class="token builtin class-name">break</span>
           except Exception as e:
               <span class="token builtin class-name">continue</span>
           time_.sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
           <span class="token function">time</span> -<span class="token operator">=</span> <span class="token number">1</span>
       <span class="token keyword">if</span> not time:
           raise Exception<span class="token punctuation">(</span><span class="token string">"未找到 %s"</span> % num<span class="token punctuation">)</span>

   def execute_chrome_protocol_js<span class="token punctuation">(</span>self, protocol, params: dict<span class="token punctuation">)</span>:
       <span class="token string">""</span>"
       Chrome DevTools 协议操作 具体协议请参考 https://chromedevtools.github.io/devtools-protocol/
       :param protocol: str 协议名称
       :param params: dict 参数
       :return:
       <span class="token string">""</span>"
       resource <span class="token operator">=</span> <span class="token string">"/session/%s/chromium/send_command_and_get_result"</span> % self.session_id
       command_executor <span class="token operator">=</span> self.command_executor
       url <span class="token operator">=</span> command_executor._url + resource
       body <span class="token operator">=</span> json.dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'cmd'</span><span class="token builtin class-name">:</span> protocol, <span class="token string">'params'</span><span class="token builtin class-name">:</span> params<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
       response <span class="token operator">=</span> command_executor._request<span class="token punctuation">(</span><span class="token string">'POST'</span>, url, body<span class="token punctuation">)</span>
       <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span>:
           <span class="token builtin class-name">return</span> response
       <span class="token builtin class-name">return</span> response<span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span>

   def execute_js<span class="token punctuation">(</span>self, js<span class="token punctuation">)</span>:
       <span class="token string">""</span>"
       执行js  过瑞数检测
       :param js: str 待执行的js
       :return:  <span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"xxx"</span>, value: <span class="token string">"xxx"</span><span class="token punctuation">&#125;</span>
       <span class="token string">""</span>"
       resource <span class="token operator">=</span> <span class="token string">"/session/%s/chromium/send_command_and_get_result"</span> % self.session_id
       command_executor <span class="token operator">=</span> self.command_executor
       url <span class="token operator">=</span> command_executor._url + resource
       body <span class="token operator">=</span> json.dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'cmd'</span><span class="token builtin class-name">:</span> <span class="token string">"Runtime.evaluate"</span>, <span class="token string">'params'</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"expression"</span><span class="token builtin class-name">:</span> js<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
       response <span class="token operator">=</span> command_executor._request<span class="token punctuation">(</span><span class="token string">'POST'</span>, url, body<span class="token punctuation">)</span>
       <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span>:
           <span class="token builtin class-name">return</span> response
       <span class="token builtin class-name">return</span> response<span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后以极验官网demo为例进行了200次的测试，准确率高达了99%。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODA5MjMwNS1lMDk0ZDExYjQ0MjA4YjRjLmpwZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/pa-chong-shi-zhan-po-jie-css-fan-pa/</url>
    <content><![CDATA[ <h4><a id="_CSS_0"></a>一. CSS的作用</h4>
<p>  为了让网页元素的样式更加丰富，也为了让网页的内容和样式能拆分开，CSS由此思想而诞生，CSS是 Cascading Style Sheets 的首字母缩写，意思是层叠样式表。有了CSS，html中大部分表现样式的标签就废弃不用了，html只负责文档的结构和内容，表现形式完全交给CSS，html文档变得更加简洁。</p>
<h4><a id="_CSS_2"></a>二、. 快速复习CSS内容</h4>
<p>CSS学习笔记总结（上）：
CSS学习笔记总结（下）：<a 
&nbsp;<br>
这里讲解一下CSS反爬需要用到的知识：</p>
<p><strong>1.伪元素选择器</strong>：伪元素选择器有before和after,它们可以通过样式在元素中插入内容。</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">.box2:before{content:'行首文字';}
.box3:after{content:'行尾文字';}

<p><strong>2. 关于定位</strong><br>
我们可以使用css的position属性来设置元素的定位类型，position的设置项如下：</p>

<div class="table-box"><table>
<thead>
<tr>
<th>position设置项</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>relative</td>
<td>生成相对定位元素，元素所占据的文档流的位置保留，元素本身相对自身位置进行偏移</td>
</tr>
<tr>
<td>absolute</td>
<td>生成绝对定位，元脱离文档流，<strong>不占据文档流的位置</strong>，可以理解为漂浮在文档流的上方，<strong>相对于上一个设置了定位的父级元素来进行定位</strong>，如果找不到，则相对于body元素进行定位。</td>
</tr>
<tr>
<td>fixed</td>
<td>生成固定定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，<strong>相对于浏览器窗口进行定位</strong></td>
</tr>
<tr>
<td>static</td>
<td>默认值，没有定位，元素出现在正常的文档流中，相对于取消定位属性或者不设置定位元素</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承position属性的值</td>
</tr>
</tbody>
</table></div><p>&nbsp;<br>
<strong>3. 定位元素的偏移</strong><br>
定位元素还需要用left、right、top或者bottom来设置相对于参照元素的偏移量<br>
&nbsp;</p>
<h4><a id="_CSS_29"></a>三、 这里就一道反爬虫题目来讲解CSS反爬：</h4>
<p>页面上显示的数据为：<br>
<img src="https://img-blog.csdnimg.cn/20190506161446610.png" alt="在这里插入图片描述"><br>
但html中的数据为：<br>
<img src="https://img-blog.csdnimg.cn/20190506161531581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3><a name="t0"></a><a id="_34"></a><strong>解析：</strong></h3>
<p><strong>1. 第一个大div[@class=‘col-md-1’]标签下有4个div标签，该标签对应的数据是320，很明显，text内容是7这个div标签是没有用处的，剩下三个标签顺序打乱。</strong><br>
&nbsp;<br>
对于text内容为7的div标签，由于它盒子与盒子之间的间距margin-right=-1em, 也就是跟该标签全部向左移动-1em,所以数据不会显示出来，且不占用文档流的位置。<img src="https://img-blog.csdnimg.cn/20190506163518712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
剩下的三个div标签的解析，见下文<br>
&nbsp;<br>
<strong>2. 第二个大div[@class=‘col-md-1’]标签下有3个div标签，该标签对应的数据417，很明显，这三个div标签只是顺序打乱而已。</strong><br>
&nbsp;<br>
这里的标签都是采用左浮动特性，碰到父元素边界、其他元素才停下来， 元素定位采用relative，生成相对定位元素，元素所占据的文档流的位置保留，元素本身相对自身位置进行偏移，所以如果没有设置定义定位偏移量，显示的<strong>数据应该是174</strong>, 但是每个div标签都设置了left偏移量，我们可以通过分析left偏移量就可以得出正确的数据<br>
<img src="https://img-blog.csdnimg.cn/20190506162730115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
1需要从本来的百位数向右移动一位，也就是1是在十位数的位置<br>
<img src="https://img-blog.csdnimg.cn/2019050616311829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
7需要从本来的十位数向右偏移1位，也就是7是在个位数的位置<br>
<img src="https://img-blog.csdnimg.cn/20190506163238616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
4需要从个位数向左偏移1位数，也就是4是在百位数的位置<br>
综上，便可以得到正确的数据：417<br>
&nbsp;<br>
<strong>3. 对于最后一个大div[@class=‘col-md-1’]标签，该div标签下没有内嵌div标签，也没有显示数据，这个是使用了before伪元素选择器，可以查看css文件中，该标签:before选择器下的content对应的数据，就是该div标签需要显示出来的数据。</strong><br>
<img src="https://img-blog.csdnimg.cn/20190506162111740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4><a id="_55"></a>四、核心代码：</h4>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">    <span class="token keyword">def</span> <span class="token function">detail_parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> div_html<span class="token punctuation">,</span> response_str<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        分别每组div[@class='col-md-1']进行详细解析，有俩种不同解析，一种只是div标签顺序不正确，另外一种是使用了伪元素选择器
        :param div_html: 传进来的div[@class='col-md-1']
        :param response_str: 该网页的elements内容，也就是response.text
        :return:None
        """</span>
        <span class="token comment"># 获取div[@class='col-md-1']下的所有div标签</span>
        div_list <span class="token operator">=</span> div_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./div"</span><span class="token punctuation">)</span>
        <span class="token comment"># todo:1.对于div_list长度为3以下的</span>
        <span class="token comment"># 就是使用伪元素选择器</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>div_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>
                text <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./text()"</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token operator">not</span> text<span class="token punctuation">:</span>
                    class_name <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./@class"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                    num <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"\.{}\:before\s*.*?\s*content\:\"(\d*)\""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">,</span> response_str<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                    self<span class="token punctuation">.</span>total_num <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"总数"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>total_num<span class="token punctuation">)</span>
        <span class="token comment"># todo:2.对于div_list长度大于等于3的</span>
        <span class="token comment"># 长度为4就是其中有个div不显示，长度为3就是div标签数据显示顺序打乱</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>div_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
                div_list <span class="token operator">=</span> div_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>div_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                div <span class="token operator">=</span> div_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                class_name <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./@class"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                data <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./text()"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                left <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"\.{}\s.*?\sleft\:(.*?)em"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">,</span> response_str<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token operator">not</span> left<span class="token punctuation">:</span>
                    <span class="token comment"># 如果left为空，表名位置不需要调整</span>
                    number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data
                <span class="token comment"># 否则就需要调整位置</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    index <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    number<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data
            num <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>number<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>total_num <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"总数"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>total_num<span class="token punctuation">)</span>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/ji-yan-3.0-hua-yan-zheng-ma-po-jie-selenium-ji-suan-hua-dong-que-kou-zuo-biao-suan-fa-80-zheng-que-lu/</url>
    <content><![CDATA[ <p><strong>极滑2.0的破解思路：</strong><br>
 <strong>一. 模拟点击验证按钮</strong><br>
  直接用Selenium模拟点击按钮<br>
 <strong>二. 识别滑动缺口的位置</strong><br>
  <strong>2.0旧版本：</strong> 利用原图和缺口图对比检测方式来识别缺口的位置，通过遍历俩张图片，找出相同位置像素RGB差距超过此阀值的像素点，那么此像素点的位置就是缺口的位置。<br>
  <strong>3.0新版本：</strong> 通过截屏获取带有缺口的验证码图片，通过验证码图片的像素进行识别，凹槽位置的RGB三个色素基本都是小于150， 通过遍历x的轴，如果x轴从左到右边如果有连续x_max/8.6个像素中的RGB中的三个色素都是小于150，那个该x就是缺口的左边的距离，下面将详细讲解这个。<br>
 <strong>三. 模拟拖动滑块</strong><br>
   模拟人的移动轨迹通过验证，一般是先加速后减速。</p>
<hr>
<p><strong>破解的重要点就是：识别滑动缺口的位置。</strong><br>
测试案例（凹槽像素x轴为80， y轴在45±15）：<br>
<img src="https://img-blog.csdnimg.cn/20190412192450591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>额外知识：全黑的RGB为（0,0,0）， 全白的RGB（255,255,255）</strong><br>
我们通过分析像素的R、G、B来得出规律，我们打印一下坐标轴y=50，x轴上个点像素的RGB：</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.signin(event)" style="position: unset;">x  y    像素R、G、B
72 50 (126, 126, 125)
73 50 (219, 219, 219)
73 50 (219, 219, 219)
77 50 (165, 166, 164)
81 50 (80, 80, 80)
82 50 (76, 76, 75)
83 50 (58, 58, 56)
84 50 (101, 102, 100)
85 50 (124, 125, 122)
86 50 (118, 119, 116)
87 50 (105, 107, 103)
88 50 (96, 96, 94)
89 50 (82, 83, 81)
90 50 (77, 77, 77)
91 50 (77, 77, 77)
92 50 (83, 83, 83)
93 50 (104, 104, 104)
94 50 (135, 135, 135)
95 50 (128, 128, 128)
96 50 (85, 85, 85)
97 50 (84, 84, 84)
98 50 (139, 139, 138)
99 50 (139, 139, 137)
100 50 (139, 139, 139)
101 50 (123, 123, 123)
102 50 (83, 83, 83)
103 50 (91, 91, 91)
104 50 (141, 141, 141)
105 50 (140, 140, 140)
106 50 (135, 135, 135)
107 50 (98, 98, 98)
108 50 (73, 73, 73)
109 50 (119, 119, 119)
110 50 (140, 140, 140)
111 50 (127, 127, 127)
112 50 (85, 85, 85)
113 50 (88, 88, 88)
114 50 (137, 137, 137)
115 50 (135, 135, 135)
116 50 (133, 133, 133)
117 50 (132, 132, 132)
118 50 (129, 129, 129)
119 50 (123, 123, 123)
120 50 (87, 87, 87)
121 50 (57, 57, 57)
122 50 (145, 145, 145)
123 50 (234, 234, 234)


<p>可以再尝试其他y轴的来进行分析，我们会发现，凹槽位置的像素点的R、G、B都是小于150，而且基本会连续40个x轴上的像素的R、G、B都是小于150，电脑屏幕大小不同，连续个数不同，基本都是连续image.size[0]/6.45个像素, 这样子我们就可以从这个思路写算法来找出从凹槽的x坐标。<br>
<strong>算法：</strong> 向右边连续有30到50个像素的R、G、B都是小于150，这就是我们所想要的数据，也就是凹槽缺口的左位置：</p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.signin(event)" style="position: unset;"><span class="token keyword">def</span> <span class="token function">get_gap</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    获取缺口偏移量
    :param image: 带缺口图片
    :return:
    """</span>
    <span class="token comment"># left_list保存所有符合条件的x轴坐标</span>
    left_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment"># 我们需要获取的是凹槽的x轴坐标，就不需要遍历所有y轴，遍历几个等分点就行</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment"># x轴从x为image.size[0]/5.16的像素点开始遍历，因为凹槽不会在x轴为50以内</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">5.16</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">8.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> is_pixel_equal<span class="token punctuation">(</span>image<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> left_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
    <span class="token keyword">return</span> left_list
<span class="token keyword">def</span> <span class="token function">is_pixel_equal</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> left_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    判断两个像素是否相同
    :param image: 图片
    :param x: 位置x
    :param y: 位置y
    :return: 像素是否相同
    """</span>
    <span class="token comment"># 取两个图片的像素点</span>
    pixel1 <span class="token operator">=</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
    threshold <span class="token operator">=</span> <span class="token number">150</span>
    <span class="token comment"># count记录一次向右有多少个像素点R、G、B都是小于150的</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment"># 如果该点的R、G、B都小于150，就开始向右遍历，记录向右有多少个像素点R、G、B都是小于150的</span>
    <span class="token keyword">if</span> pixel1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> pixel1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> pixel1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            piexl <span class="token operator">=</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
            <span class="token keyword">if</span> piexl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> piexl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> piexl<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold<span class="token punctuation">:</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">8.6</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> count <span class="token operator">&lt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">4.3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        left_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment"># 这里的测试图片，需要读者自行更改</span>
    image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"captcha1.png"</span><span class="token punctuation">)</span>
    image <span class="token operator">=</span> image<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">)</span>
    left_list <span class="token operator">=</span> get_gap<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>left_list<span class="token punctuation">)</span>

<p>结果为：</p>
<blockquote>
<p>[(80, 43), (76, 45), (80, 42), (80, 41)]</p>
</blockquote>
<p>其中(x, z)中的x为凹槽左侧的位置，z是count，就是从该x点坐标起有多少连续像素点的R、G、B都是小于150的，因为我们遍历y轴，所有我们的得到几个值，其中，z值最接近40的，结果最符合。<br>
我们可以用这个代码进行列表的排序，越接近40的越在前面：</p>
<pre class="prettyprint"><code class="has-numbering" onclick="mdcp.signin(event)" style="position: unset;">left_list = sorted(left_list, key=lambd x: abs(x[1]-40))

<p>结果变为：</p>
<blockquote>
<p>[(80, 41), (80, 42), (80, 43), (76, 45)]</p>
</blockquote>
<p>这里我们就去列表第一个元素中的x轴，这个x就是凹槽的左侧的x轴的下标，得到这个值，下面的内容就容易办了，我就直接上完整代码了喔，有什么不懂的可以留言给我</p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.signin(event)" style="position: unset;"><span class="token keyword">import</span> time
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
EMAIL <span class="token operator">=</span> <span class="token string">'cqc@cuiqingcai.com'</span>
PASSWORD <span class="token operator">=</span> <span class="token string">'123456'</span>
BORDER_1 <span class="token operator">=</span> <span class="token number">7</span>
BORDER_2 <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">class</span> <span class="token class-name">CrackGeetest</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'https://account.geetest.com/login'</span>
        self<span class="token punctuation">.</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>email <span class="token operator">=</span> EMAIL
        self<span class="token punctuation">.</span>password <span class="token operator">=</span> PASSWORD
        self<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>try_num <span class="token operator">=</span> <span class="token number">2</span>
        self<span class="token punctuation">.</span>now_num <span class="token operator">=</span> <span class="token number">2</span>
        self<span class="token punctuation">.</span>flesh_num <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 获取初始验证按钮</span>
    <span class="token keyword">def</span> <span class="token function">get_geetest_button</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取初始验证按钮
        :return:
        """</span>
        button <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'geetest_radar_tip'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> button
    <span class="token comment"># 获取截图中验证码的上下左右的位置</span>
    <span class="token keyword">def</span> <span class="token function">get_position</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取验证码位置
        :return: 验证码位置元组
        """</span>
        img <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'geetest_canvas_img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        location <span class="token operator">=</span> img<span class="token punctuation">.</span>location
        size <span class="token operator">=</span> img<span class="token punctuation">.</span>size
        top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span>
            <span class="token string">'width'</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right
    <span class="token comment"># 获取网页截图</span>
    <span class="token keyword">def</span> <span class="token function">get_screenshot</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取网页截图
        :return: 截图对象
        """</span>
        screenshot <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>get_screenshot_as_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
        screenshot <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>screenshot<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> screenshot
    <span class="token comment"># 获取滑块对象</span>
    <span class="token keyword">def</span> <span class="token function">get_slider</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取滑块
        :return: 滑块对象
        """</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            slider <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'geetest_slider_button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>crack<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">return</span> slider
    <span class="token comment"># 获取验证码图片</span>
    <span class="token keyword">def</span> <span class="token function">get_geetest_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'captcha.png'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取验证码图片
        :return: 图片对象
        """</span>
        top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> self<span class="token punctuation">.</span>get_position<span class="token punctuation">(</span><span class="token punctuation">)</span>
        screenshot <span class="token operator">=</span> self<span class="token punctuation">.</span>get_screenshot<span class="token punctuation">(</span><span class="token punctuation">)</span>
        captcha <span class="token operator">=</span> screenshot<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>
        captcha<span class="token punctuation">.</span>save<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        <span class="token keyword">return</span> captcha
    <span class="token comment"># 打开页面,输入账号与密码</span>
    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        打开网页输入用户名密码
        :return: None
        """</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        email <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">"//i[@class='icon-email']/../../input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        password <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//i[@class='icon-password']/../../input"</span><span class="token punctuation">)</span>
        email<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>email<span class="token punctuation">)</span>
        password<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>password<span class="token punctuation">)</span>
    <span class="token comment"># 根据偏移量获取移动轨迹</span>
    @<span class="token builtin">staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">get_track</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        根据偏移量获取移动轨迹
        :param distance: 偏移量
        :return: 移动轨迹
        """</span>
        <span class="token comment"># 移动轨迹</span>
        track <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment"># 当前位移</span>
        current <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment"># 减速阈值</span>
        mid <span class="token operator">=</span> distance <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">5</span>
        <span class="token comment"># 计算间隔</span>
        t <span class="token operator">=</span> <span class="token number">0.2</span>
        <span class="token comment"># 初速度</span>
        v <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> current <span class="token operator">&lt;</span> distance<span class="token punctuation">:</span>
            <span class="token keyword">if</span> current <span class="token operator">&lt;</span> mid<span class="token punctuation">:</span>
                <span class="token comment"># 加速度为正2</span>
                a <span class="token operator">=</span> <span class="token number">2</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># 加速度为负3</span>
                a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span>
            <span class="token comment"># 初速度v0</span>
            v0 <span class="token operator">=</span> v
            <span class="token comment"># 当前速度v = v0 + at</span>
            v <span class="token operator">=</span> v0 <span class="token operator">+</span> a <span class="token operator">*</span> t
            <span class="token comment"># 移动距离x = v0t + 1/2 * a * t^2</span>
            move <span class="token operator">=</span> v0 <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">*</span> t <span class="token operator">*</span> t
            <span class="token comment"># 当前位移</span>
            current <span class="token operator">+=</span> move
            <span class="token comment"># 加入轨迹</span>
            track<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>move<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> track
    <span class="token comment"># 拖动滑块到缺口处</span>
    <span class="token keyword">def</span> <span class="token function">move_to_gap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        拖动滑块到缺口处
        :param slider: 滑块
        :param track: 轨迹
        :return:
        """</span>
        ActionChains<span class="token punctuation">(</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">)</span><span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>slider<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> x <span class="token keyword">in</span> track<span class="token punctuation">:</span>
            ActionChains<span class="token punctuation">(</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">)</span><span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span>xoffset<span class="token operator">=</span>x<span class="token punctuation">,</span> yoffset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        ActionChains<span class="token punctuation">(</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">)</span><span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 获取缺口偏移量</span>
    <span class="token keyword">def</span> <span class="token function">get_gap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取缺口偏移量
        :param image: 带缺口图片
        :return:
        """</span>
        left_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_pixel_equal<span class="token punctuation">(</span>image<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> left_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
        <span class="token keyword">return</span> left_list
    <span class="token comment"># 判断缺口偏移量</span>
    @<span class="token builtin">staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">is_pixel_equal</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> left_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        判断两个像素是否相同
        :param image: 图片
        :param x: 位置x
        :param y: 位置y
        :return: 像素是否相同
        """</span>
        x_max <span class="token operator">=</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token comment"># 取两个图片的像素点</span>
        pixel1 <span class="token operator">=</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
        threshold <span class="token operator">=</span> <span class="token number">150</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> pixel1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> pixel1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> pixel1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold<span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                piexl <span class="token operator">=</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
                <span class="token keyword">if</span> piexl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> piexl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold <span class="token operator">and</span> piexl<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> threshold<span class="token punctuation">:</span>
                    count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x_max<span class="token operator">/</span><span class="token number">8.6</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> count <span class="token operator">&lt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x_max<span class="token operator">/</span><span class="token number">4.3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            left_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">def</span> <span class="token function">crack</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 输入用户名密码</span>
        self<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 点击验证按钮</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        button <span class="token operator">=</span> self<span class="token punctuation">.</span>get_geetest_button<span class="token punctuation">(</span><span class="token punctuation">)</span>
        button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># ＢOREDER有俩种情况，一种是７,一种是１４</span>
        <span class="token keyword">def</span> <span class="token function">slider_try</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span> BORDER<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>now_num<span class="token punctuation">:</span>
                <span class="token comment"># 减去缺口位置</span>
                gap <span class="token operator">-=</span> BORDER
                <span class="token comment"># 计算滑动距离</span>
                track <span class="token operator">=</span> self<span class="token punctuation">.</span>get_track<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>gap<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment"># 拖动滑块</span>
                slider <span class="token operator">=</span> self<span class="token punctuation">.</span>get_slider<span class="token punctuation">(</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>move_to_gap<span class="token punctuation">(</span>slider<span class="token punctuation">,</span> track<span class="token punctuation">)</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>success <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>
                        EC<span class="token punctuation">.</span>text_to_be_present_in_element<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'geetest_success_radar_tip_content'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'验证成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>now_num <span class="token operator">-=</span> <span class="token number">1</span>
                    test_num <span class="token operator">=</span> self<span class="token punctuation">.</span>try_num <span class="token operator">-</span> self<span class="token punctuation">.</span>now_num
                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>now_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d次尝试失败, 验证失败"</span> <span class="token operator">%</span> test_num<span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"验证失败,正在进行第%d次尝试"</span> <span class="token operator">%</span> test_num<span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>success <span class="token operator">and</span> self<span class="token punctuation">.</span>now_num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 获取验证码图片</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                image <span class="token operator">=</span> self<span class="token punctuation">.</span>get_geetest_image<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token comment"># todo: 判断是其他验证，或者是自动识别通过</span>
                self<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">True</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"自动识别通过，无需滑动%s"</span> <span class="token operator">%</span> e<span class="token punctuation">)</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span>
            <span class="token comment"># 获取缺口位置</span>
            left_list <span class="token operator">=</span> self<span class="token punctuation">.</span>get_gap<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
            x_max <span class="token operator">=</span> image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            left_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>left_list<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>x_max<span class="token operator">/</span><span class="token number">6.45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>left_list<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> left_list<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"left_lsit为空, 无法获取gap"</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            gap <span class="token operator">=</span> left_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token comment"># 第一中请求，gap减少７</span>
            slider_try<span class="token punctuation">(</span>gap<span class="token punctuation">,</span> BORDER_1<span class="token punctuation">)</span>
            <span class="token comment"># 成功后退出</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>success<span class="token punctuation">:</span>
                <span class="token comment"># 尝试gap减少14</span>
                slider_try<span class="token punctuation">(</span>gap<span class="token punctuation">,</span> BORDER_2<span class="token punctuation">)</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>success<span class="token punctuation">:</span>
                test_num <span class="token operator">=</span> self<span class="token punctuation">.</span>try_num <span class="token operator">-</span> self<span class="token punctuation">.</span>now_num <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第{}次刷新,第{}次尝试,验证通过"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>flesh_num<span class="token punctuation">,</span> test_num<span class="token punctuation">)</span><span class="token punctuation">)</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>success<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"重新刷新页面,这是第%d次刷新"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>flesh_num<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>flesh_num <span class="token operator">+=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>now_num <span class="token operator">=</span> <span class="token number">2</span>
            self<span class="token punctuation">.</span>try_num <span class="token operator">=</span> <span class="token number">2</span>
            self<span class="token punctuation">.</span>crack<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    crack <span class="token operator">=</span> CrackGeetest<span class="token punctuation">(</span><span class="token punctuation">)</span>
    crack<span class="token punctuation">.</span>crack<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">del</span> crack


]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/pa-chong-ip-ping-bi-ti-mu-lia-chong-jie-ti-fang-fa/</url>
    <content><![CDATA[ <h4><a id="_0"></a>题目：</h4>
<p><img src="https://img-blog.csdnimg.cn/20190424072451136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>技术难点：</strong> 这个题目的难点在于，你登录跟没有登录，获取到的数据是不一样的，之前爬取其他题目的时候，发现结果怎么也不对，后来通过下载的html分析，才发现，原来自己爬取到的数据，是未登录的数据。</p>
<p><strong>解题方法：</strong> 登录信息，直接headers添加cookies， 或者自己重新通过他们的登录平台先登录，获取信息后再添加proxy，然后再爬取。</p>
<h5><a id="selenium_6"></a>方法一：selenium的运用（速度慢）</h5>
<ol>
<li>创建 webdriver.ChromeOptions()，给他添加proxy参数，以及headless无界面显示</li>
<li>通过账号密码登录</li>
<li>切换选项卡execute_script(“window_open”),browser.switch_to_window(broser.window_handles[1])， get需要访问的地址，爬取数据</li>
<li>由于这里一直使用代理来访问，所以需要一直校验是否成功</li>
</ol>
<h5><a id="session_13"></a>方法二：session的运用（速度快）</h5>
<ol>
<li>创建个session</li>
<li>session.get访问登录页面，获取_token的cookies信息, post提交表单时候需要用到</li>
<li>session.post模拟登录</li>
<li>登录之后，session就保存了登录时候的信息，这个时候，就可以给session添加代理，然后访问响应的网站，就可以获取得到登录账号后的响应页面的信息。</li>
</ol>
<p><strong>补充：</strong> 这里需要特别注意的是，session.post请求，模拟登录，需要_token的cookies信息、email账号、password密码，我门可以通过抓包软件，就可以看到post请求中需要的数据<br>
<img src="https://img-blog.csdnimg.cn/20190424093609428.png" alt="在这里插入图片描述"></p>

                               
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/pa-chong-yan-zheng-ma-po-j-dian-ji-xuan-zhuan-yan-zheng-ma/</url>
    <content><![CDATA[ <p><strong>这里破解某某动漫的点击翻转验证码为例：</strong><img src="https://img-blog.csdnimg.cn/20190427211818387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDU3NjAxMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
分析页面的源码发现，这些翻转的图片，我们可以下载下来，既然可以获取到这些图片，那么这个的<strong>破解思路</strong>为：</p>
<ol>
<li><strong>获取1000张样本集合：</strong> 用selenium访问，通过截屏，以及切片，一次获取四张图片，然后点击"换一组"，依次循环1000次<br>
&nbsp;</li>
<li><strong>对获取的图片进行去重：</strong> 通过图片的rbg总值来去重，rgb总值相差3000以为，基本认为这是同一张图片，就只保留一张。<br>
&nbsp;</li>
<li><strong>人为手动给去重的图片进行调整。</strong><br>
&nbsp;</li>
<li><strong>通过selenium来模拟登录，输入账号和密码</strong><br>
&nbsp;</li>
<li><strong>截屏，截取验证码图片</strong><br>
&nbsp;</li>
<li><strong>翻转每张验证码，记录翻转次数，通过和样本基本的每张图片的rgb进行一一比较，如果每个像素的rgb都小于100，那么这个翻转后的图片就是正确的位置，返回翻转次数。</strong><br>
&nbsp;</li>
<li><strong>依次翻转，记录各个图片需要翻转的次数</strong><br>
&nbsp;</li>
<li><strong>点击对应图片的元素，进行翻转</strong><br>
&nbsp;</li>
<li><strong>点击提交按钮，进行登录</strong><br>
&nbsp;</li>
<li><strong>判断是否登录成功</strong></li>
</ol>
<p><strong>获取1000张样本集的代码：</strong></p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span>  By
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">import</span> random
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">import</span> time
<span class="token keyword">class</span> <span class="token class-name">Crack</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_number<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>login_url <span class="token operator">=</span> <span class="token string">"http://www.1kkk.com/"</span>
        self<span class="token punctuation">.</span>start_number <span class="token operator">=</span> start_number
        self<span class="token punctuation">.</span>count <span class="token operator">=</span> count
        self<span class="token punctuation">.</span>chrome_options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--healess"</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        输入账号，密码
        :return:None
        """</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>login_url<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"header-avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 获取所有图片</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>start_number<span class="token punctuation">,</span> self<span class="token punctuation">.</span>start_number<span class="token operator">+</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>image_png<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">"rotate-refresh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">save_screen_png</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取网页截图
        :return: 截图对象
        """</span>
        self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_all_elements_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">"rotate-background"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        screen_image <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>get_screenshot_as_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
        screenshot <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>screen_image<span class="token punctuation">)</span><span class="token punctuation">)</span>
        screenshot<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"screenshot{}.png"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> screenshot
    <span class="token keyword">def</span> <span class="token function">image_png</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过获取网页截图，然后进行切片，返回四张图片
        :return:
        """</span>
        screenshot <span class="token operator">=</span> self<span class="token punctuation">.</span>save_screen_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
        images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> num_2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 依次获取5张图片，存入iamges列表中</span>
            images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_image_position<span class="token punctuation">(</span>screenshot<span class="token punctuation">,</span> num<span class="token punctuation">,</span> num_2<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># 获取整体四张图片的坐标</span>
        <span class="token comment"># 进行切片</span>
    <span class="token keyword">def</span> <span class="token function">get_image_position</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> screenshot<span class="token punctuation">,</span> number<span class="token punctuation">,</span> number_2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取四张图片的下标
        :return: left, top, right, bottom
        """</span>
        image <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">"//div[@class='rotate-background'][{}]"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>number_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        location <span class="token operator">=</span> image<span class="token punctuation">.</span>location
        size <span class="token operator">=</span> image<span class="token punctuation">.</span>size
        top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span>
            <span class="token string">'width'</span><span class="token punctuation">]</span>
        image <span class="token operator">=</span> screenshot<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>
        image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./static/total_images/image{}_{}.png"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> number_2<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> image
    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>start_number<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    初始化登录类，下载图片
    :param start_number:开启位置
    :param count: 数量
    :return:
    """</span>
    c <span class="token operator">=</span> Crack<span class="token punctuation">(</span>start_number<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">del</span> c
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    download<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>


<p><strong>图片去重的代码：</strong></p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">import</span> os
<span class="token keyword">import</span> gevent
<span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkey
monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 图片数量</span>
gCount <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment"># 列表,用来保存rgb</span>
rgb_dif_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment"># 当前保存图片的名称</span>
gNumber <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">sum_rgb</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    计算rgb的值
    :param images: 图片
    :return: rgb的值
    """</span>
    num <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            pixel <span class="token operator">=</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
            num <span class="token operator">=</span> num <span class="token operator">+</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> num
<span class="token keyword">def</span> <span class="token function">check_have_in</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    通过rgb的总值，来判断是否已经存在列表
    :param num: Ture or False
    :return: 
    """</span>
    <span class="token keyword">global</span> rgb_dif_list
    <span class="token keyword">if</span> num <span class="token keyword">in</span> rgb_dif_list<span class="token punctuation">:</span>
        <span class="token comment"># 如果存在，就得删除</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment"># 否则就将rgb存入列表中，更改名字，并返回False</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>image_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    删除图片
    :param image_url: 图片的url
    :return:
    """</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除图片:"</span><span class="token punctuation">,</span> image_url<span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>image_url<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">start_check</span><span class="token punctuation">(</span>start_number<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> rgb_dif_list
    <span class="token keyword">global</span> gCount
    <span class="token keyword">global</span> gNumber
    images_url <span class="token operator">=</span> <span class="token string">"./static/total_images/{}"</span>
    save_url <span class="token operator">=</span> <span class="token string">"./static/images/{}"</span>
    <span class="token keyword">for</span> number_1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_number<span class="token punctuation">,</span> start_number <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> number_2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            image_url <span class="token operator">=</span> images_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"image{}_{}.png"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>number_1<span class="token punctuation">,</span> number_2<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>image_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
                image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_url<span class="token punctuation">)</span>
                <span class="token comment"># 通过元素的rgb三个值相加的总数，通过列表保存，如果在列表中存在就添加，否则就删除</span>
                rgb_num <span class="token operator">=</span> sum_rgb<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"image{}_{}.png"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>number_1<span class="token punctuation">,</span> number_2<span class="token punctuation">)</span><span class="token punctuation">,</span> rgb_num<span class="token punctuation">)</span>
                <span class="token comment"># 判断该图片的rgb是否已经存在列表中</span>
                <span class="token keyword">if</span> rgb_num <span class="token operator">&gt;</span> <span class="token number">4000000</span><span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rgb_num<span class="token operator">-</span><span class="token number">3000</span><span class="token punctuation">,</span> rgb_num<span class="token operator">+</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    check_result <span class="token operator">=</span> check_have_in<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
                    <span class="token comment"># 判断结果，做响应处理</span>
                    <span class="token keyword">if</span> check_result<span class="token punctuation">:</span>
                        <span class="token comment"># 存在情况，退出</span>
                        <span class="token keyword">break</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    rgb_dif_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rgb_num<span class="token punctuation">)</span>
                    gCount <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token comment"># 不存在情况，更改名字</span>
                    gNumber <span class="token operator">+=</span> <span class="token number">1</span>
                    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>save_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"images{}.png"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>gNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> start_number<span class="token operator">+</span>count <span class="token operator">==</span> <span class="token number">501</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"剩余图片总数为"</span><span class="token punctuation">,</span> gCount<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span><span class="token punctuation">[</span>
        gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>start_check<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>start_check<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>start_check<span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>start_check<span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>start_check<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># start_check(1, 10)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>


<p><strong>验证码破解：</strong></p>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> TimeoutException
<span class="token keyword">import</span> time
<span class="token keyword">import</span> os
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">class</span> <span class="token class-name">Crack</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>login_url <span class="token operator">=</span> <span class="token string">"http://www.1kkk.com/"</span>
        <span class="token comment"># self.chrome_options = webdriver.ChromeOptions()</span>
        <span class="token comment"># self.chrome_options.add_argument("--healess")</span>
        self<span class="token punctuation">.</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>login_url<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        输入账号，密码
        :return:None
        """</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">"header-avatar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token comment"># self.browser.find_element_by_class_name("header-avatar").click()</span>
        name_page <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"txt_name"</span><span class="token punctuation">)</span>
        name_page<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"18218299414"</span><span class="token punctuation">)</span>
        password_page <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"txt_password"</span><span class="token punctuation">)</span>
        password_page<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"shao0812"</span><span class="token punctuation">)</span>
        true_or_false <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">while</span> true_or_false<span class="token punctuation">:</span>
            true_or_false <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token comment"># 获取四张需要旋转的图片</span>
            images <span class="token operator">=</span> self<span class="token punctuation">.</span>image_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment"># 获取整体四张图片的几次</span>
            turn_num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>
                turn_num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image_turn_num<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment"># print(turn_num_list)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> turn_num_list<span class="token punctuation">:</span>
                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'rotate-refresh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
                    true_or_false <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token comment"># 根据上面得到的旋转次数点击图片</span>
        self<span class="token punctuation">.</span>click_image<span class="token punctuation">(</span>turn_num_list<span class="token punctuation">)</span>
        <span class="token comment"># 结果正确，点击登录按钮</span>
        self<span class="token punctuation">.</span>click_submit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># todo: 如果旋转出问题，就得重新.来</span>
        <span class="token comment"># try:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">".tip.color-main"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">"请点击下方图片，旋转至正确方向~"</span><span class="token punctuation">:</span>
            <span class="token comment"># 如果登录不成功，将重新刷新页面登录</span>
            self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">click_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> turn_num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过算出来的点击次数，来点击图片
        :param turn_num_list: 四张图需要点击的次数
        :return: None
        """</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>turn_num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> turn_num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            image <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>
                EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">"//div[@class='rotate-background'][{}]"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>turn_num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                image<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">save_screen_png</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取网页截图
        :return: 截图对象
        """</span>
        screen_image <span class="token operator">=</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>get_screenshot_as_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
        screenshot <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>screen_image<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># screenshot.save("screenshot.png")</span>
        <span class="token keyword">return</span> screenshot
    <span class="token keyword">def</span> <span class="token function">image_png</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过获取网页截图，然后进行切片，返回四张图片
        :return:
        """</span>
        screenshot <span class="token operator">=</span> self<span class="token punctuation">.</span>save_screen_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
        images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 依次获取4张图片，存入iamges列表中</span>
            images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_image<span class="token punctuation">(</span>screenshot<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> images
    <span class="token keyword">def</span> <span class="token function">get_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> screenshot<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取四张图片的下标
        :return: left, top, right, bottom
        """</span>
        image <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">"//div[@class='rotate-background'][{}]"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        location <span class="token operator">=</span> image<span class="token punctuation">.</span>location
        size <span class="token operator">=</span> image<span class="token punctuation">.</span>size
        top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span>
            <span class="token string">'width'</span><span class="token punctuation">]</span>
        image <span class="token operator">=</span> screenshot<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># image.save("image{}.png".format(number))</span>
        <span class="token keyword">return</span> image
    <span class="token keyword">def</span> <span class="token function">image_turn_num</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        用获取的图片跟图片库的图片比较，
        :param image: 原图
        :return:
        """</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 原图最多转三次</span>
            dir_path <span class="token operator">=</span> <span class="token string">"./static/images/"</span>
            change_image <span class="token operator">=</span> image<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token operator">*</span>i<span class="token punctuation">)</span>
            <span class="token comment"># change_image.save("change{}.png".format(i))</span>
            <span class="token keyword">for</span> or_path <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
                or_image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> or_path<span class="token punctuation">)</span><span class="token punctuation">)</span>
                result <span class="token operator">=</span> self<span class="token punctuation">.</span>examine_pixel<span class="token punctuation">(</span>or_image<span class="token punctuation">,</span> change_image<span class="token punctuation">)</span>
                <span class="token keyword">if</span> result<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> i
        <span class="token keyword">return</span> <span class="token number">5</span>
    <span class="token keyword">def</span> <span class="token function">examine_pixel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image1<span class="token punctuation">,</span> image2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        判断来个图片是否相等
        :param image1: 图片1
        :param image2: 图片2
        :return:
        """</span>
        thredhold <span class="token operator">=</span> <span class="token number">100</span>
        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>image1<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>image1<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                pixel1 <span class="token operator">=</span> image1<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
                pixel2 <span class="token operator">=</span> image2<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>pixel1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> pixel2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> thredhold <span class="token operator">and</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>pixel1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> pixel2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> thredhold <span class="token operator">and</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>pixel1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> pixel2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> thredhold<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">def</span> <span class="token function">click_submit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        点击登录按钮
        :return: None
        """</span>
        submit <span class="token operator">=</span> self<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"btnLogin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        submit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""pass"""</span>
    c <span class="token operator">=</span> Crack<span class="token punctuation">(</span><span class="token punctuation">)</span>
    c<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>


]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/pa-chong-ip-dai-li-chi-de-si-ge-mo-kuai-de-jie-shao-and-ge-ge-mo-kuai-de-shi-xian-shang/</url>
    <content><![CDATA[  <p>代理池分为4个模块：<strong>存储模块、获取模块、检测模块、接口模块。</strong><br>
&nbsp;</p>

<div class="table-box"><table>
<thead>
<tr>
<th>模块</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储模块</td>
<td>存储模块使用Redis的有序集合，用来做dialing的去重和状态表示，同时它也是中心模块和基础模块，将其他模块串连起来</td>
</tr>
<tr>
<td>获取模块</td>
<td>获取模块定时从代理网站获取代理，将获取的代理传递给存储模块，并保存到数据库</td>
</tr>
<tr>
<td>检测模块</td>
<td>检测模块定时从存储模块获取所有代理，并对代理进行检测，根据不同的检测结果对代理设置不同的标识</td>
</tr>
<tr>
<td>接口模块</td>
<td>接口模块通过Web API接通的服务接口，接口通过连接数据库并通过Web形式返回可用的代理</td>
</tr>
</tbody>
</table></div><h5><a id="_9"></a>存储模块的实现：</h5>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> redis
<span class="token keyword">from</span> random <span class="token keyword">import</span> choice
MAX_SCORE <span class="token operator">=</span> <span class="token number">100</span>
MIN_SCORE <span class="token operator">=</span> <span class="token number">0</span>
INITIAL_SCORE <span class="token operator">=</span> <span class="token number">10</span>
REDIS_HOST <span class="token operator">=</span> <span class="token string">"localhost"</span>
REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>
DB_NUM <span class="token operator">=</span> <span class="token number">5</span>
REDIS_KEY <span class="token operator">=</span> <span class="token string">'proxies'</span>
<span class="token keyword">class</span> <span class="token class-name">PoolEmptyError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""自定义ip代理池为空异常"""</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">RedisClient</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""redis数据库客户端类"""</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token operator">=</span>REDIS_HOST<span class="token punctuation">,</span> port<span class="token operator">=</span>REDIS_PORT<span class="token punctuation">,</span> db<span class="token operator">=</span>DB_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        初始化
        :param host:Redis 地址
        :param port: Redis 端口
        :param db: Redis 数据库
        """</span>
        self<span class="token punctuation">.</span>db <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">,</span> db<span class="token operator">=</span>db<span class="token punctuation">,</span> decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> score<span class="token operator">=</span>INITIAL_SCORE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        添加代理，设置分数为初始分数
        :param proxy: 代理
        :param score: 分数
        :return: 添加结果
        """</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> <span class="token punctuation">{</span>proxy<span class="token punctuation">:</span> score<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">random</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        随机获取有效代理，首先尝试获取最高分数代理，如果最高分数不存在，则按照排名获取，否则异常
        :return:随机代理
        """</span>
        result <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zrangebyscore<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> MAX_SCORE<span class="token punctuation">,</span> MAX_SCORE<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> choice<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zrevrange<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> choice<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> PoolEmptyError
    <span class="token keyword">def</span> <span class="token function">decrease</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        代理值减一分，分数小于最小值，则代理删除
        :param proxy: 代理
        :return: 修改后的代理分数
        """</span>
        score <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
        <span class="token keyword">if</span> score <span class="token operator">and</span> score <span class="token operator">&gt;</span> MIN_SCORE<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'代理'</span><span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> <span class="token string">'当前分数'</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> <span class="token string">'减1'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zincrby<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"代理"</span><span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> <span class="token string">"当前分数"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> <span class="token string">"移除"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">exits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        判断proxy是否存在
        :param proxy: 代理
        :return:是否存在
        """</span>
        <span class="token keyword">return</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span>
    <span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        将代理在设置为MAX_SCORE
        :param proxy:
        :return:
        """</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"代理"</span><span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> <span class="token string">"可用, 设置为"</span><span class="token punctuation">,</span> MAX_SCORE<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> <span class="token punctuation">{</span>proxy<span class="token punctuation">:</span>MAX_SCORE<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取数量
        :return: 数量
        """</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zcard<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">all</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        获取全部代理
        :return: 全部代理列表
        """</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>zrangebyscore<span class="token punctuation">(</span>REDIS_KEY<span class="token punctuation">,</span> MIN_SCORE<span class="token punctuation">,</span> MAX_SCORE<span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<h4><a id="_111"></a>获取模块：</h4>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> json
<span class="token keyword">from</span> utils <span class="token keyword">import</span> get_page
<span class="token keyword">import</span> re
<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq
<span class="token keyword">class</span> <span class="token class-name">ProxyMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    定义元类, 给类添加俩私有类属性__CrawlFunc__, __CrawlFuncCount__
    :return 类创建的引用
    """</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> base<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        attrs<span class="token punctuation">[</span><span class="token string">'__CrawlFunc__'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> attrs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">'crawl_'</span> <span class="token keyword">in</span> k<span class="token punctuation">:</span>
                attrs<span class="token punctuation">[</span><span class="token string">'__CrawlFunc__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>
        attrs<span class="token punctuation">[</span><span class="token string">"__CrawlFuncCount__"</span><span class="token punctuation">]</span> <span class="token operator">=</span> count
        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> base<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Crawler</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> metaclass<span class="token operator">=</span>ProxyMetaclass<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    爬虫类定义
    """</span>
    <span class="token keyword">def</span> <span class="token function">get_proxies</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过crawl获取的到的代理添加到proxies列表中，并返回，这里用到了协程
        :param callback: 下面的crawl_daili66
        :return:
        """</span>
        proxies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> proxy <span class="token keyword">in</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"self.{}()"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功获取到代理"</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
            proxies<span class="token punctuation">.</span>append<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>
        <span class="token keyword">return</span> proxies
    <span class="token keyword">def</span> <span class="token function">crawl_daili66</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> page_count<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        66快代理
        :param page_count:
        :return:
        """</span>
        start_url <span class="token operator">=</span> <span class="token string">'http://www.66ip.cn/{}.html'</span>
        headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"__jsluid=d67ba1bf483046976b81a6b33a372b1c; Hm_lvt_1761fabf3c988e7f04bec51acd4073f4=1555505708; Hm_lpvt_1761fabf3c988e7f04bec51acd4073f4=1555508780"</span><span class="token punctuation">,</span>
            <span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"www.66ip.cn"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        urls <span class="token operator">=</span> <span class="token punctuation">[</span>start_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> page_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        count <span class="token operator">=</span> page_count
        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
            headers_referer <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"http://www.66ip.cn/{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count <span class="token operator">-</span> page_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment"># 需要特别注意：headers.update(headers_referer)返回值None，添加headers_referer的键值对到headers字典的键值对</span>
            headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>headers_referer<span class="token punctuation">)</span>
            page_count <span class="token operator">-=</span> <span class="token number">1</span>
            html <span class="token operator">=</span> get_page<span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token operator">=</span>headers<span class="token punctuation">)</span>
            <span class="token keyword">if</span> html<span class="token punctuation">:</span>
                doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
                trs <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.containerbox table tr:gt(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> tr <span class="token keyword">in</span> trs<span class="token punctuation">:</span>
                    ip <span class="token operator">=</span> tr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'td:nth-child(1)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    port <span class="token operator">=</span> tr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'td:nth-child(2)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">yield</span> <span class="token string">":"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">crawl_kuaidaili</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        快代理
        :return:
        """</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            start_url <span class="token operator">=</span> <span class="token string">'http://www.kuaidaili.com/free/inha/{}/'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            html <span class="token operator">=</span> get_page<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span>
            <span class="token keyword">if</span> html<span class="token punctuation">:</span>
                ip_address <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;td data-title="IP"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">)</span>
                re_ip_address <span class="token operator">=</span> ip_address<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
                port <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;td data-title="PORT"&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">)</span>
                re_port <span class="token operator">=</span> port<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
                <span class="token keyword">for</span> address<span class="token punctuation">,</span> port <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>re_ip_address<span class="token punctuation">,</span> re_port<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    address_port <span class="token operator">=</span> address <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> port
                    <span class="token keyword">yield</span> address_port<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">crawl_ip3366</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        云代理
        :return:
        """</span>
        <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            start_url <span class="token operator">=</span> <span class="token string">'http://www.ip3366.net/free/?stype=1&amp;page={}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>
            html <span class="token operator">=</span> get_page<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span>
            ip_address <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;tr&gt;\s*&lt;td&gt;(.*?)&lt;/td&gt;\s*&lt;td&gt;(.*?)&lt;/td&gt;'</span><span class="token punctuation">)</span>
            <span class="token comment"># \s * 匹配空格，起到换行作用</span>
            re_ip_address <span class="token operator">=</span> ip_address<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
            <span class="token keyword">for</span> address<span class="token punctuation">,</span> port <span class="token keyword">in</span> re_ip_address<span class="token punctuation">:</span>
                result <span class="token operator">=</span> address <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> port
                <span class="token keyword">yield</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">crawl_xicidaili</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        国内高匿代理IP
        :return:
        """</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            start_url <span class="token operator">=</span> <span class="token string">'http://www.xicidaili.com/nn/{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            headers <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span><span class="token punctuation">,</span>
                <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'_free_proxy_session=BAh7B0kiD3Nlc3Npb25faWQGOgZFVEkiJWRjYzc5MmM1MTBiMDMzYTUzNTZjNzA4NjBhNWRjZjliBjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMUp6S2tXT3g5a0FCT01ndzlmWWZqRVJNek1WanRuUDBCbTJUN21GMTBKd3M9BjsARg%3D%3D--2a69429cb2115c6a0cc9a86e0ebe2800c0d471b3'</span><span class="token punctuation">,</span>
                <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.xicidaili.com'</span><span class="token punctuation">,</span>
                <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://www.xicidaili.com/nn/3'</span><span class="token punctuation">,</span>
                <span class="token string">'Upgrade-Insecure-Requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
            html <span class="token operator">=</span> get_page<span class="token punctuation">(</span>start_url<span class="token punctuation">,</span> options<span class="token operator">=</span>headers<span class="token punctuation">)</span>
            <span class="token keyword">if</span> html<span class="token punctuation">:</span>
                find_trs <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;tr class.*?&gt;(.*?)&lt;/tr&gt;'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
                trs <span class="token operator">=</span> find_trs<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
                <span class="token keyword">for</span> tr <span class="token keyword">in</span> trs<span class="token punctuation">:</span>
                    find_ip <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;td&gt;(\d+\.\d+\.\d+\.\d+)&lt;/td&gt;'</span><span class="token punctuation">)</span>
                    re_ip_address <span class="token operator">=</span> find_ip<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>tr<span class="token punctuation">)</span>
                    find_port <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;td&gt;(\d+)&lt;/td&gt;'</span><span class="token punctuation">)</span>
                    re_port <span class="token operator">=</span> find_port<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>tr<span class="token punctuation">)</span>
                    <span class="token keyword">for</span> address<span class="token punctuation">,</span> port <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>re_ip_address<span class="token punctuation">,</span> re_port<span class="token punctuation">)</span><span class="token punctuation">:</span>
                        address_port <span class="token operator">=</span> address <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> port
                        <span class="token keyword">yield</span> address_port<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">crawl_iphai</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""ip海"""</span>
        start_url <span class="token operator">=</span> <span class="token string">'http://www.iphai.com/'</span>
        html <span class="token operator">=</span> get_page<span class="token punctuation">(</span>start_url<span class="token punctuation">)</span>
        <span class="token keyword">if</span> html<span class="token punctuation">:</span>
            find_tr <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;tr&gt;(.*?)&lt;/tr&gt;'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
            trs <span class="token operator">=</span> find_tr<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
            <span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>trs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                find_ip <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;td&gt;\s+(\d+\.\d+\.\d+\.\d+)\s+&lt;/td&gt;'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
                re_ip_address <span class="token operator">=</span> find_ip<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>trs<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>
                find_port <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;td&gt;\s+(\d+)\s+&lt;/td&gt;'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
                re_port <span class="token operator">=</span> find_port<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>trs<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> address<span class="token punctuation">,</span> port <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>re_ip_address<span class="token punctuation">,</span> re_port<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    address_port <span class="token operator">=</span> address <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> port
                    <span class="token keyword">yield</span> address_port<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">crawl_data5u</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""无忧代理"""</span>
        start_url <span class="token operator">=</span> <span class="token string">'http://www.data5u.com/free/gngn/index.shtml'</span>
        headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span><span class="token punctuation">,</span>
            <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=0'</span><span class="token punctuation">,</span>
            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
            <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'JSESSIONID=47AA0C887112A2D83EE040405F837A86'</span><span class="token punctuation">,</span>
            <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.data5u.com'</span><span class="token punctuation">,</span>
            <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://www.data5u.com/free/index.shtml'</span><span class="token punctuation">,</span>
            <span class="token string">'Upgrade-Insecure-Requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>
            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        html <span class="token operator">=</span> get_page<span class="token punctuation">(</span>start_url<span class="token punctuation">,</span> options<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">if</span> html<span class="token punctuation">:</span>
            ip_address <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;span&gt;&lt;li&gt;(\d+\.\d+\.\d+\.\d+)&lt;/li&gt;.*?&lt;li class=\"port.*?&gt;(\d+)&lt;/li&gt;'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
            re_ip_address <span class="token operator">=</span> ip_address<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
            <span class="token keyword">for</span> address<span class="token punctuation">,</span> port <span class="token keyword">in</span> re_ip_address<span class="token punctuation">:</span>
                result <span class="token operator">=</span> address <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> port
                <span class="token keyword">yield</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> Crawler<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 一一测试</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>get_proxies<span class="token punctuation">(</span><span class="token string">"crawl_daili66"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<h4><a id="_286"></a>公共模块：</h4>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConnectionError
<span class="token keyword">from</span> db <span class="token keyword">import</span> RedisClient
base_headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, sdch'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>
<span class="token punctuation">}</span>
<span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> proxy<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    抓取代理
    :param url:网址
    :param options:
    :return:
    """</span>
    headers <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>base_headers<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在抓取'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        redis <span class="token operator">=</span> RedisClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
        proxies <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span><span class="token operator">+</span>redis<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'抓取成功'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text
    <span class="token keyword">except</span> ConnectionError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'抓取失败'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>


]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/xiang-jie-tcp-he-udp-de-qu-bie-jiao-ni-kuai-su-li-jie-tcp-de-san-ci-wo-shou-jian-li-lian-jie-he-si-ci-hui-shou-guan-bi-lian-jie/</url>
    <content><![CDATA[ <h3><a name="t0"></a><a id="_0"></a>前言：</h3>
<p>之前我们有了解IP地址和端口号，通过IP地址能够找到对应的设备，然后再通过端口号找到对应的端口，再通过端口把数据传输给应用程序，这里要注意，数据不能随便发送，在发送之前还需要选择一个对应的传输协议，保证程序之间按照指定的传输规则进行数据的通信，而这个传输协议就是我今天要分享的内容。</p>
<p>要想理解 TCP 和 UDP 的区别，首先要明白什么是 <strong>TCP</strong>？什么是 <strong>UDP</strong>？</p>
<h3><a name="t1"></a><a id="1UDP_5"></a>1，UDP介绍</h3>
<p>UDP 是User Datagram Protocol的简称， 中文名是<a href="https://www.baidu.com/s?wd=%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" rel="nofollow" data-token="3764d615ec270f62aa3ede7771ad981f">用户数据报协议</a>，是OSI（Open System Interconnection，开放式系统互联） 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务，IETF RFC 768是UDP的正式规范。UDP在IP报文的协议号是17。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NTUxOTM2LTRjMDM2M2Y5OWM4YWMxY2UuanBn?x-oss-process=image/format,png" alt="udp数据报.jpg"></p>
<p>UDP是一种面向无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。</p>
<p>由上图可以看出，UDP 除了端口号，基本啥都没有了。如果没有这两个端口号，数据就不知道该发给哪个应用。</p>
<p>UDP的特点：</p>
<blockquote>
<ul>
<li>UDP是一个<a href="https://baike.baidu.com/item/%E6%97%A0%E8%BF%9E%E6%8E%A5%E5%8D%8F%E8%AE%AE" rel="nofollow" data-token="45cd212cbf314793d344dee8f5ee59c3">无连接协议</a>，传输数据之前源端和终端不建立连接.</li>
<li>一台服务机可同时向多个客户机传输相同的消息</li>
<li>UDP信息报的标题很短，只有8个字节，相对于TCP的20个字节信息报而言UDP的额外开销很小。</li>
<li>它不属于连接型协议，因而具有资源消耗小，处理速度快</li>
</ul>
</blockquote>
<p>正是由于UDP无连接、开销小、速度快这一特性，所以通常音频、视频和普通数据在传送时使用UDP较多，因为它们即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。比如我们聊天用的ICQ和<a href="https://baike.baidu.com/item/QQ" rel="nofollow" data-token="76ec8555a5076587389f4c6cc139ba70">QQ</a>就是使用的UDP协议。</p>
<h5><a id="UDP_22"></a>UDP举例说明：</h5>
<ul>
<li><code>直播</code>。  直播对实时性的要求比较高，宁可丢包，也不要卡顿的，所以很多直播应用都基于 UDP 实现了自己的视频传输协议</li>
<li><code>实时游戏</code>。游戏的特点也是实时性比较高，在这种情况下，采用自定义的可靠的 UDP 协议，自定义重传策略，能够把产生的延迟降到最低，减少网络问题对游戏造成的影响</li>
<li><code>物联网</code>。一方面，物联网领域中断资源少，很可能知识个很小的嵌入式系统，而维护 TCP 协议的代价太大了；另一方面，物联网对实时性的要求也特别高。比如 Google 旗下的 Nest 简历 Thread Group，推出了物联网通信协议 Thread，就是基于 UDP 协议的</li>
</ul>
<p><strong>简单的理解：把udp想象成写信模式，把信投入邮箱，收件人是否收到信，不确定。这也就是验证了，为什么udp传输过程中会丢包的原因，以及它的不安全性。</strong></p>
<hr>
<h3><a name="t2"></a><a id="2TCP_31"></a>2，TCP介绍</h3>
<p>TCP的英文全拼(Transmission Control Protocol)简称传输控制协议，它是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>
<p>TCP的传输步骤如下：</p>
<blockquote>
<p>创建连接<br>
传输数据<br>
关闭连接</p>
</blockquote>
<p>TCP的特点：</p>
<blockquote>
<p>1.面向连接:</p>
<ul>
<li>通信双方必须先建立好连接才能进行数据的传输，数据传输完成后，双方必须断开此连接，以释放系统资源。</li>
</ul>
</blockquote>
<blockquote>
<p>2.可靠传输:</p>
<ul>
<li>TCP 采用发送应答机制</li>
<li>超时重传</li>
<li>错误校验</li>
<li>流量控制和阻塞管理</li>
</ul>
</blockquote>
<p><strong>简单理解：把TCP想象成打电话模式，在通信开始之前，一定要先建立好连接，才能发送数据，通信结束要关闭连接。</strong></p>
<hr>
<h3><a name="t3"></a><a id="3TCP_53"></a>3，TCP三次握手：</h3>
<p>所有的问题，首先都要建立连接，所以首先是连接维护的问题<br>
TCP 的建立连接称为三次握手，在了解之前，我们先分析一下tcp数据报情况：<br>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NTUxOTM2LTNkNTU5ZjM0YTJiOThkZWQuanBn?x-oss-process=image/format,png" alt="tcp数据报.jpg"></p>
<p>由上图可知：</p>
<blockquote>
<ul>
<li>序列号seq：占4个字节，用来标记数据段的顺序</li>
<li>确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号,一般回复消息+1即为确认号</li>
<li>确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效</li>
<li>同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1</li>
<li>终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</li>
<li>PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。</li>
</ul>
</blockquote>
<h4><a id="_67"></a>三次握手详解：</h4>
<p><strong>最开始的时候客户端和服务器都是处于CLOSED状态。主动打开连接的为客户端，被动打开连接的是服务器。</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NTUxOTM2LTY0ZmNkZDNiZjk0ODc0OWEucG5n?x-oss-process=image/format,png" alt="三次握手.png"></p>
<blockquote>
<p>A：您好，我是 A<br>
B：您好 A，我是 B<br>
A：您好 B</p>
</blockquote>
<p>1,TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</p>
<p>2,TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。</p>
<p>3,TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号。</p>
<p>4,TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</p>
<p>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</p>
<hr>
<h3><a name="t4"></a><a id="4TCP_88"></a>4,TCP四次挥手：</h3>
<p>说完建立连接，再说下断开连接，也被称为四次挥手，可以简单理解如下<br>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NTUxOTM2LWIxZjdhODlmODNhZTQ2NTQucG5n?x-oss-process=image/format,png" alt="四次挥手.png"></p>
<blockquote>
<p>A：B 啊，我不想玩了<br>
B：哦，你不想玩了啊，我知道了<br>
这个时候，只是 A 不想玩了，即不再发送数据，但是 B 可能还有未发送完的数据，所以需要等待 B 也主动关闭。<br>
B：A 啊，好吧，我也不玩了，拜拜<br>
A：好的，拜拜<br>
<strong>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。</strong></p>
</blockquote>
<p>1,客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</p>
<p>2,服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</p>
<p>3,客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</p>
<p>4,服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</p>
<p>5,客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗ *∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</p>
<p>6,服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p>
<hr>
<h2><a name="t5"></a><a id="4_111"></a>4,常见面试题解析：</h2>
<h5><a id="1_112"></a>【问题1】为什么连接的时候是三次握手，关闭的时候却是四次握手？</h5>
<blockquote>
<p>答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，“你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p>
</blockquote>
<h5><a id="2TIME_WAIT2MSLCLOSE_115"></a>【问题2】为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</h5>
<blockquote>
<p>答：因为网络没有绝对的安全，有可能最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p>
</blockquote>
<h5><a id="3_119"></a>【问题3】为什么不能用两次握手进行连接？</h5>
<blockquote>
<p>答：3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。<br>
假设由于网络原因，消息被阻塞在了某个节点，然后阻塞的时间超出设定的时间，服务器会一直认为，客户端没有收到消息，会重复发消息，造成资源浪费。 当客户端和服务器通信完成后，这个被浏览器认为失效的消息，到达了服务器，此时，服务器以为是新的连接，然后回应，而浏览器认为没有给服务器发送过消息，所以不会理睬服务器，又造成资源浪费。<br>
第三次握手看似多余其实不然，这主要是为了防止已失效的请求报文段突然又传送到了服务端而产生连接的误判</p>
</blockquote>
<h5><a id="4_125"></a>【问题4】如果已经建立了连接，但是客户端突然出现故障了怎么办？</h5>
<blockquote>
<p>答：TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
</blockquote>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/08/pa-chong-ip-dai-li-chi-de-si-ge-mo-kuai-de-jie-shao-yi-ji-ge-ge-mo-kuai-de-shi-xian-xia/</url>
    <content><![CDATA[  <p>代理池分为4个模块：<strong>存储模块、获取模块、检测模块、接口模块。</strong><br>
&nbsp;</p>

<div class="table-box"><table>
<thead>
<tr>
<th>模块</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储模块</td>
<td>存储模块使用Redis的有序集合，用来做dialing的去重和状态表示，同时它也是中心模块和基础模块，将其他模块串连起来</td>
</tr>
<tr>
<td>获取模块</td>
<td>获取模块定时从代理网站获取代理，将获取的代理传递给存储模块，并保存到数据库</td>
</tr>
<tr>
<td>检测模块</td>
<td>检测模块定时从存储模块获取所有代理，并对代理进行检测，根据不同的检测结果对代理设置不同的标识</td>
</tr>
<tr>
<td>接口模块</td>
<td>接口模块通过Web API接通的服务接口，接口通过连接数据库并通过Web形式返回可用的代理</td>
</tr>
</tbody>
</table></div><h5><a id="_9"></a>检测模块的实现：</h5>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process
<span class="token keyword">import</span> time
<span class="token keyword">from</span> api <span class="token keyword">import</span> app
<span class="token keyword">from</span> getter <span class="token keyword">import</span> Getter
<span class="token keyword">from</span> tester <span class="token keyword">import</span> Tester
TESTER_CYCLE <span class="token operator">=</span> <span class="token number">20</span>
GETTER_CYCLE <span class="token operator">=</span> <span class="token number">20</span>
TESTER_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>
GETTER_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>
API_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">class</span> <span class="token class-name">Scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""调度模块"""</span>
    <span class="token keyword">def</span> <span class="token function">schedule_tester</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cycle<span class="token operator">=</span>TESTER_CYCLE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        定时测试代理
        :param cycle:
        :return:
        """</span>
        tester <span class="token operator">=</span> Tester<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试器开始运行"</span><span class="token punctuation">)</span>
            tester<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">schedule_getter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cycle<span class="token operator">=</span>GETTER_CYCLE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        定时获取代理
        :param cycle:
        :return:
        """</span>
        getter <span class="token operator">=</span> Getter<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始抓取代理"</span><span class="token punctuation">)</span>
            getter<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">schedule_api</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        开启api
        :return:
        """</span>
        app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"代理池开始运行"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> TESTER_ENABLED<span class="token punctuation">:</span>
            test_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_tester<span class="token punctuation">)</span>
            test_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> GETTER_ENABLED<span class="token punctuation">:</span>
            getter_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_getter<span class="token punctuation">)</span>
            getter_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> API_ENABLED<span class="token punctuation">:</span>
            api_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_api<span class="token punctuation">)</span>
            api_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> Scheduler<span class="token punctuation">(</span><span class="token punctuation">)</span>
    a<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>


<h4><a id="API_79"></a>API模块的实现：</h4>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> g
<span class="token keyword">from</span> db <span class="token keyword">import</span> RedisClient
__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'app'</span><span class="token punctuation">]</span>
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">get_conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token string">'redis'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        g<span class="token punctuation">.</span>redis <span class="token operator">=</span> RedisClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> g<span class="token punctuation">.</span>redis
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'&lt;h2&gt;Welcom to Proxy Pool System &lt;/h2&gt;'</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/random'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">get_proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    获取随机可用代理
    :return: 随机代理
    """</span>
    conn <span class="token operator">=</span> get_conn<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> conn<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/count"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">get_counts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    获取代理池总量
    :return: 代理池总量
    """</span>
    conn <span class="token operator">=</span> get_conn<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>

<h4><a id="_125"></a>调度模块的实现：</h4>
<pre class="prettyprint"><code class="prism language-python has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process
<span class="token keyword">import</span> time
<span class="token keyword">from</span> api <span class="token keyword">import</span> app
<span class="token keyword">from</span> getter <span class="token keyword">import</span> Getter
<span class="token keyword">from</span> tester <span class="token keyword">import</span> Tester
TESTER_CYCLE <span class="token operator">=</span> <span class="token number">20</span>
GETTER_CYCLE <span class="token operator">=</span> <span class="token number">20</span>
TESTER_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>
GETTER_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>
API_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">class</span> <span class="token class-name">Scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""调度模块"""</span>
    <span class="token keyword">def</span> <span class="token function">schedule_tester</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cycle<span class="token operator">=</span>TESTER_CYCLE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        定时测试代理
        :param cycle:
        :return:
        """</span>
        tester <span class="token operator">=</span> Tester<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试器开始运行"</span><span class="token punctuation">)</span>
            tester<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">schedule_getter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cycle<span class="token operator">=</span>GETTER_CYCLE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        定时获取代理
        :param cycle:
        :return:
        """</span>
        getter <span class="token operator">=</span> Getter<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始抓取代理"</span><span class="token punctuation">)</span>
            getter<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">schedule_api</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        开启api
        :return:
        """</span>
        app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"代理池开始运行"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> TESTER_ENABLED<span class="token punctuation">:</span>
            test_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_tester<span class="token punctuation">)</span>
            test_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> GETTER_ENABLED<span class="token punctuation">:</span>
            getter_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_getter<span class="token punctuation">)</span>
            getter_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> API_ENABLED<span class="token punctuation">:</span>
            api_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_api<span class="token punctuation">)</span>
            api_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> Scheduler<span class="token punctuation">(</span><span class="token punctuation">)</span>
    a<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>


]]></content>
  </entry>
</search>
